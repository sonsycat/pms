{"remainingRequest":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\pms_oracle\\pms_UI\\src\\views\\components\\orgSearch\\index.vue?vue&type=style&index=0&id=7ff3ec50&lang=scss&scoped=true&","dependencies":[{"path":"D:\\work\\pms_oracle\\pms_UI\\src\\views\\components\\orgSearch\\index.vue","mtime":1693362205000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\css-loader\\dist\\cjs.js","mtime":1693361949000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1693362179000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\postcss-loader\\src\\index.js","mtime":1693362110000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1693362152000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924000},{"path":"D:\\work\\pms_oracle\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kZXB0U2VhcmNoIHsKICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7Cn0KLy8g5Y2V5L2N5by55qGG5qC35byP5pu05pS5CiNkZXB0RGlhbG9nIHsKICA6OnYtZGVlcCAuZWwtZGlhbG9nIHsKICAgIGhlaWdodDogODAlOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIC5lbC1kaWFsb2dfX2JvZHkgewogICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDU0cHgpOwogICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICA+IGRpdiB7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIC5oZWFkLWNvbnRhaW5lcjpsYXN0LW9mLXR5cGUgewogICAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA1NHB4KTsKICAgICAgICAgIG92ZXJmbG93LXk6IGF1dG87CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/components/orgSearch","sourcesContent":["<template>\n  <div class=\"deptSearch el-form-item\" >\n    <el-form-item :label=\"label\" :prop=\"compName\">\n      <el-input :size=\"size\" :readonly=\"readonly\" :clearable=\"!readonly\" @keyup.enter.native=\"handleQuery\" v-on:click.native=\"handleClickInput\" :placeholder=\"`请选择${label}`\" v-model=\"deptParams[compName]\" @change=\"handleChange\" style=\"width:100%\"/>\n    </el-form-item>\n    <el-form-item label=\"\" :prop=\"compCode\" style=\"display:none\">\n      <el-input type=\"text\" v-model=\"deptParams[compCode]\" @keyup.enter.native=\"handleQuery\"/>\n    </el-form-item>\n    <el-dialog custom-class=\"el-button--primary\" :visible.sync=\"deptSearchFormDialog\" id=\"deptDialog\" :close-on-click-modal=\"false\" :title=\"`选择${label}`\" append-to-body\n               width=\"500px\" >\n      <div>\n        <div class=\"head-container\">\n          <el-row>\n            <el-col :span=\"16\" class=\"pr5\">\n              <el-input\n                v-model=\"deptNameForm\"\n                placeholder=\"请输入编码名称\"\n                clearable\n                size=\"small\"\n                prefix-icon=\"el-icon-search\"\n                style=\"margin-bottom: 20px;\"\n              />\n            </el-col>\n            <el-col :span=\"8\">\n              <el-button\n                size=\"mini\"\n                type=\"text\"\n                icon=\"el-icon-refresh\"\n                @click=\"handleRefresh\"\n              >刷新</el-button>\n              <el-button\n                size=\"mini\"\n                type=\"text\"\n                icon=\"el-icon-arrow-down\"\n                @click=\"handleExpand(true)\"\n              >展开</el-button>\n              <el-button\n                size=\"mini\"\n                type=\"text\"\n                icon=\"el-icon-arrow-up\"\n                @click=\"handleExpand(false)\"\n              >折叠</el-button>\n            </el-col>\n          </el-row>\n\n\n        </div>\n        <div class=\"head-container\">\n          <el-tree\n            lazy\n            v-loading=\"loading\"\n            node-key=\"id\"\n            :data=\"deptOptions\"\n            :load=\"getDeptDatas\"\n            :props=\"defaultProps\"\n            :filter-node-method=\"filterNode\"\n            :default-expand-all=\"defaultExpand\"\n            ref=\"treeForm\"\n            @node-click=\"handleFormNodeClick\"\n          />\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { treeselect, treeRoom } from \"@/api/until\";\nexport default {\n  name: \"index\",\n  props: {\n    queryParams: Object,\n    label: {\n      type: String,\n      default: \"单位\"\n    },\n    size: {\n      type: String,\n      default: \"mini\"\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    compCode: {\n      type: String,\n      default: \"compCode\"\n    },\n    compName: {\n      type: String,\n      default: \"compName\"\n    },\n    // 需要清空类似 科室的值\n    deptCode: {\n      type: String,\n      default: \"deptCode\"\n    }\n  },\n  data() {\n    return {\n      //定义点击次数,默认0次\n      treeClickCount: 0,\n      deptParams: this.queryParams,\n      deptSearchFormDialog: false,\n      deptNameForm: undefined,\n      deptOptions: undefined,\n      defaultProps: {\n        children: \"children\",\n        label: \"label\"\n      },\n      deptList: [],\n      open: false,\n      loading: true,\n      // 默认不展开所有节点\n      defaultExpand: false\n    };\n  },\n\n  mounted() {\n    // this.getTreeSelect();\n  },\n  watch: {\n    // 根据名称筛选部门树\n    deptNameForm(val) {\n      this.$refs.treeForm.filter(val);\n    },\n    queryParams: {\n      handler(val) {\n        this.deptParams = val;\n      },\n      deep: true,\n      immediate: true\n    },\n    // form表单中search节点单击事件\n    handleFormNodeClick(data) {\n      if (this.compCode == \"compCode\") {\n        this.queryParams.deptCode = null;\n      }\n      this.deptParams[this.compCode] = data.id;\n      this.deptParams[this.compName] = data.label;\n      this.deptSearchFormDialog = false;\n      this.$emit(\"click\",this.deptParams)\n      this.$emit(\"input\", this.deptParams);\n    }\n  },\n  methods: {\n    // 点击input\n    handleClickInput() {\n      if (!this.readonly) {\n        this.deptSearchFormDialog = true;\n      } else {\n        // this.msgError('禁止编辑')\n      }\n    },\n    getDeptDatas(node, resolve) {\n      var pId = \"\";\n      if (node.level === 0) {\n        pId = \"\";\n      } else {\n        pId = node.data.id;\n      }\n      setTimeout(() => {\n        this.loading = true;\n        treeselect({ parentId: pId }).then(res => {\n          if (resolve) {\n            resolve(res.data);\n          } else {\n            this.deptOptions = res.data;\n          }\n          this.loading = false;\n        });\n      }, 100);\n    },\n    //获取单位树\n    getTreeSelect() {\n      this.loading = true;\n      treeselect().then(response => {\n        this.deptOptions = response.data;\n        this.loading = false;\n      });\n    },\n    // form表单中search节点单击事件\n    handleFormNodeClick(data) {\n      //记录点击次数\n      this.treeClickCount++;\n      //单次点击次数超过2次不作处理,直接返回,也可以拓展成多击事件\n      if (this.treeClickCount >= 2) {\n        return;\n      }\n      //计时器,计算300毫秒为单位,可自行修改\n      this.timer = window.setTimeout(() => {\n        if (this.treeClickCount == 1) {\n          //把次数归零\n          this.treeClickCount = 0;\n          //单击事件处理\n          //\t\t\t\t\tconsole.log(\"单击事件\");\n        } else if (this.treeClickCount > 1) {\n          //把次数归零\n          this.treeClickCount = 0;\n          //双击事件\n          this.queryParams[this.deptCode] = null;\n          this.deptParams[this.compCode] = data.id;\n          this.deptParams[this.compName] = data.label;\n          this.deptSearchFormDialog = false;\n          this.$emit(\"input\", this.deptParams);\n          this.$emit(\"click\",this.deptParams)\n        }\n      }, 300);\n    },\n    // search筛选节点\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    handleChange(value) {\n      if (!value) {\n        this.deptParams[this.compCode] = \"\";\n        this.$emit(\"input\", this.deptParams);\n      }\n    },\n    // 刷新树节点\n    handleRefresh() {\n      // this.getTreeSelect();\n      this.getDeptDatas();\n    },\n    // 展开收缩树结点\n    handleExpand(flag) {\n      // 将没有转换成树的原数据\n      let treeList = this.deptOptions;\n      for (let i = 0; i < treeList.length; i++) {\n        this.$refs.treeForm.store.nodesMap[treeList[i].id].expanded = flag;\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.deptSearch {\n  margin-bottom: 0 !important;\n}\n// 单位弹框样式更改\n#deptDialog {\n  ::v-deep .el-dialog {\n    height: 80%;\n    overflow: hidden;\n    .el-dialog__body {\n      height: calc(100% - 54px);\n      overflow: hidden;\n      > div {\n        height: 100%;\n        .head-container:last-of-type {\n          height: calc(100% - 54px);\n          overflow-y: auto;\n        }\n      }\n    }\n  }\n}\n</style>\n"]}]}
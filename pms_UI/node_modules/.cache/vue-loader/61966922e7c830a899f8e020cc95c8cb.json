{"remainingRequest":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\pms_UI\\src\\views\\skill\\thesis\\addEdit1.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\pms_UI\\src\\views\\skill\\thesis\\addEdit1.vue","mtime":1693362206227},{"path":"F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHZhbGlkRW1haWwgfSBmcm9tJ0AvdXRpbHMvdmFsaWRhdGUnCmltcG9ydCB7IGxpc3RUaGVzaXMsIGdldFRoZXNpcywgZGVsVGhlc2lzLCBhZGRUaGVzaXMsIHVwZGF0ZVRoZXNpcyx1cGRhdGVUaGVzaXMxLCBleHBvcnRUaGVzaXMgfSBmcm9tICJAL2FwaS9za2lsbC90aGVzaXMiOwppbXBvcnQgeyB0cmVlUm9vbSwgZ2V0RW1wTGlzdCB9IGZyb20gIkAvYXBpL3VudGlsIjsKaW1wb3J0IGJ0bnMgZnJvbSAiQC92aWV3cy9za2lsbC90aGVzaXMvYnRucyI7CmltcG9ydCBmb3JtSXRlbSBmcm9tICJAL3ZpZXdzL2NvbXBvbmVudHMvZm9ybUl0ZW1OZXciOwppbXBvcnQgeyBsaXN0T3Bpbmlvbn0gZnJvbSAiQC9hcGkvc2tpbGwvb3BpbmlvbiI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImFkZEVkaXQiLAogIHByb3BzOiB7CiAgICBvcGVuOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaWQ6IHsKICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSwKICAgICAgZGVmYXVsdDogIiIKICAgIH0sCiAgICBwcm9jbG5zSWRzOiB7CiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sCiAgICAgIGRlZmF1bHQ6ICIiCiAgICB9LAogICAgdGVjaG5vQ29kZTogewogICAgICB0eXBlOiBbU3RyaW5nLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAiIgogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICAiZm9ybS5jb21wQ29kZSI6IHsKICAgICAgaGFuZGxlcih2YWwpIHsKICAgICAgICB0aGlzLmdldFRyZWVEZXB0KHZhbCk7CiAgICAgIH0sCiAgICAgIGRlZXA6IHRydWUsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIGlkOiB7CiAgICAgIGhhbmRsZXIodmFsKSB7CiAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgIGlmICh2YWwpIHsKICAgICAgICAgIHRoaXMuaWQgPSB2YWw7CiAgICAgICAgICB0aGlzLnRpdGxlID0gIuiuuuaWh+euoeeQhiAvIOafpeeci+WuoeaJueivpuaDhSI7CiAgICAgICAgICB0aGlzLmdldERldGFpbEluZm8oKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5pZCA9ICIiOwogICAgICAgICAgdGhpcy50aXRsZSA9ICLorrrmlofnrqHnkIYt5paw5aKeIjsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlZXA6IHRydWUsCiAgICAgIGltbWVkaWF0ZTogdHJ1ZQogICAgfSwKICAgIG9wZW46IHsKICAgICAgaGFuZGxlcih2YWwpIHsKICAgICAgICB0aGlzLm9wZW5EaWFsb2cgPSB2YWw7CiAgICAgIH0sCiAgICAgIGRlZXA6IHRydWUKICAgIH0sCiAgICB0ZWNobm9Db2RlOiB7CiAgICAgIGhhbmRsZXIodmFsKSB7CiAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgIGlmICh2YWwpIHsKICAgICAgICAgIHRoaXMucXVlcnlQYXJhbXMudGVjaG5vQ29kZSA9IHZhbDsKICAgICAgICAgIGNvbnNvbGUubG9nKCJ0aGlzLnF1ZXJ5UGFyYW1zIix0aGlzLnF1ZXJ5UGFyYW1zKQogICAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgfQogICAgICB9LAogICAgICBkZWVwOiB0cnVlLAogICAgICBpbW1lZGlhdGU6IHRydWUKICAgIH0sCiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBidG5zLGZvcm1JdGVtCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8g5a6h5om554q25oCB5a2X5YW4CiAgICAgIGF1ZGl0U3RhdGVPcHRpb25zOiBbXSwKICAgICAgLy8g5a6h5om55oSP6KeB6KGo5qC85pWw5o2uCiAgICAgIG9waW5pb25MaXN0OiBbXSwKICAgICAgc2hvd0RpYWxvZzpmYWxzZSwKICAgICAgdGl0bGU6ICLorrrmlofnrqHnkIYt5paw5aKeIiwKICAgICAgb3BlbkRpYWxvZzogdGhpcy5vcGVuLAogICAgICAvLyDooajljZXlj4LmlbAKICAgICAgZm9ybToge30sCiAgICAgIHRoZXNpc1R5cGVPcHRpb25zOiBbXSwKICAgICAgdGhlc2lzR3JhZGVPcHRpb25zOiBbXSwKICAgICAgcG9zaXRpb25PcHRpb25zOiBbXSwKICAgICAgaXNFeHRlbnNpb25PcHRpb25zOiBbXSwKICAgICAgZGVwdExpc3Q6IFtdLAogICAgICAvL+eUqOaIt+WIl+ihqAogICAgICB1c2VyT3B0aW9uczogW10sCiAgICAgIC8vIOafpeivouWPguaVsAogICAgICBxdWVyeVBhcmFtczogewogICAgICAgIGNvbXBDb2RlOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLnVzZXJJbmZvLmRlcHRJZCwKICAgICAgICB0ZWNobm9Db2RlOiBudWxsLAogICAgICAgIHRlY2hub1R5cGU6IG51bGwsCiAgICAgIH0sCiAgICAgIC8vIOihqOWNleagoemqjAogICAgICBydWxlczogewogICAgICAgIHRoZXNpc05hbWU6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLliIrnianlkI3np7DkuI3og73kuLrnqboiLCB0cmlnZ2VyOiAiYmx1ciIgfQogICAgICAgIF0sCiAgICAgICAgZGVwdENvZGU6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLnp5HlrqTnvJbnoIHkuI3og73kuLrnqboiLCB0cmlnZ2VyOiAiYmx1ciIgfQogICAgICAgIF0sCiAgICAgICAgeWVhcjogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuW5tOW6puS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICB0aGVzaXNUeXBlOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K665paH57qn5Yir5LiN6IO95Li656m6IiwgdHJpZ2dlcjogImNoYW5nZSIgfQogICAgICAgIF0sCiAgICAgICAgcGVyc29uQ29kZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIui0n+i0o+S6uuS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICB0aGVzaXNTdWJqZWN0OiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K665paH6aKY55uu5LiN6IO95Li656m6IiwgdHJpZ2dlcjogImJsdXIiIH0KICAgICAgICBdLAogICAgICAgIGlzc246IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLmnJ/liIrlj7fkuI3og73kuLrnqboiLCB0cmlnZ2VyOiAiYmx1ciIgfQogICAgICAgIF0sCiAgICAgICAgdGhlc2lzQ29sdW1uOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi6K665paH5qCP55uu5LiN6IO95Li656m6IiwgdHJpZ2dlcjogImJsdXIiIH0KICAgICAgICBdLAogICAgICAgIHRoZXNpc0dyYWRlOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi5YiK54mp562J57qn5LiN6IO95Li656m6IiwgdHJpZ2dlcjogImNoYW5nZSIgfQogICAgICAgIF0sCiAgICAgICAgdGhlc2lzWWVhcjogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuWIiueJqeW5tOS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICB0aGVzaXNTdGFnZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuWIiueJqeacn+S4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICB0aGVzaXNWb2x1bWU6IFsKICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICLliIrnianljbfkuI3og73kuLrnqboiLCB0cmlnZ2VyOiAiYmx1ciIgfQogICAgICAgIF0sCiAgICAgICAgcHVibGlzaDogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuWHuueJiOekvuS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICBwb3NpdGlvbjogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuaLheS7u+iBjOWKoeS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJjaGFuZ2UiIH0KICAgICAgICBdLAogICAgICAgIGlzRXh0ZW5zaW9uOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAi5piv5ZCm57uf6K6h5rqQ5pyf5YiK5LiN6IO95Li656m6IiwgdHJpZ2dlcjogImNoYW5nZSIgfQogICAgICAgIF0sCiAgICAgICAgcHVibGlzVGltZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuWHuueJiOaXtumXtOS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICBtZWV0TmFtZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuS8muiuruWQjeensOS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICBtZWV0VGltZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogIuS8muiuruaXtumXtOS4jeiDveS4uuepuiIsIHRyaWdnZXI6ICJibHVyIiB9CiAgICAgICAgXSwKICAgICAgICBhc3NpZ25lZTogWwogICAgICAgICAgewogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgICAgbWVzc2FnZTogIuS4i+S4gOiKgueCueWuoeaguOS6uuS4jeiDveS4uuepuiIsCiAgICAgICAgICAgIHRyaWdnZXI6ICJjaGFuZ2UiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgfSwKICAgICAgLy8g5LiL57qn6IqC54K55Yqe55CG5Lq6CiAgICAgIG5leHRBc3NpZ25lZTogW10sCiAgICAgIC8vIOaMiemSrue8lueggQogICAgICBidG4xOiBmYWxzZSwKICAgICAgYnRuMjogZmFsc2UsCiAgICAgIGJ0bjM6IGZhbHNlLAogICAgICBidG40OiBmYWxzZSwKICAgICAgYnRuNTogZmFsc2UsCiAgICAgIGRhdGFzOiB7fSwKICAgIH07CiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRMaXN0KCk7CiAgICB0aGlzLmdldERpY3RzKCJza2lsbF9sd2piIikudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHRoaXMudGhlc2lzVHlwZU9wdGlvbnMgPSByZXNwb25zZS5kYXRhOwogICAgfSk7CiAgICB0aGlzLmdldERpY3RzKCJza2lsbF9rd2RqIikudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHRoaXMudGhlc2lzR3JhZGVPcHRpb25zID0gcmVzcG9uc2UuZGF0YTsKICAgIH0pOwogICAgdGhpcy5nZXREaWN0cygic2tpbGxfY2JzenciKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgdGhpcy5wb3NpdGlvbk9wdGlvbnMgPSByZXNwb25zZS5kYXRhOwogICAgfSk7CiAgICB0aGlzLmdldERpY3RzKCJocl9pc19jaGFuZ2UiKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgdGhpcy5pc0V4dGVuc2lvbk9wdGlvbnMgPSByZXNwb25zZS5kYXRhOwogICAgfSk7CiAgICB0aGlzLmdldERpY3RzKCJhc3NldF9hZHVpdF9zdGF0ZSIpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICB0aGlzLmF1ZGl0U3RhdGVPcHRpb25zID0gcmVzcG9uc2UuZGF0YTsKICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5a6h5om554q25oCB5a2X5YW457+76K+RCiAgICBhdWRpdFN0YXRlRm9ybWF0KHJvdywgY29sdW1uKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdERpY3RMYWJlbCh0aGlzLmF1ZGl0U3RhdGVPcHRpb25zLCByb3cuYXVkaXRTdGF0ZSk7CiAgICB9LAogICAgc3VjY2Vzc1N1Ym1pdCgpIHsKICAgICAgdGhpcy4kZW1pdCgic3VjY2VzcyIsIGZhbHNlKTsKICAgIH0sCiAgICAvL+iOt+WPluenkeWupOWIl+ihqAogICAgZ2V0VHJlZURlcHQoZGVwdElkKSB7CiAgICAgIGxldCBkYXRhID0gewogICAgICAgIGRlcHRJZDogdGhpcy4kc3RvcmUuc3RhdGUudXNlci51c2VySW5mby5kZXB0SWQKICAgICAgfTsKICAgICAgdGhpcy5mb3JtRGVwdExpc3QgPSBbXTsKICAgICAgdHJlZVJvb20oZGF0YSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUgPT0gMjAwKSB7CiAgICAgICAgICB0aGlzLmRlcHRMaXN0ID0gcmVzcG9uc2Uucm93czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5tc2dFcnJvcihyZXNwb25zZS5tc2cpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogIAlnZXREZXRhaWxJbmZvKCkgewogICAgICBnZXRUaGVzaXModGhpcy5pZCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICAgIHRoaXMuZm9ybSA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgbGV0IHRoYXQgPSB0aGlzOwogICAgICAgIGxldCBwcm9jbG5zSWRzID0gcmVzcG9uc2UuZGF0YS5wcm9jZWR1cmVJZDsKICAgICAgICB0aGlzLmRhdGFzID0gewogICAgICAgIH07CiAgICAgICAgZ2V0RW1wTGlzdCgKICAgICAgICAgIHRoYXQsCiAgICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLm5hbWUsCiAgICAgICAgICBwcm9jbG5zSWRzLAogICAgICAgICAgdGhpcy51c2VyT3B0aW9ucywKICAgICAgICAgIHRoaXMuYnRuMSwKICAgICAgICAgIHRoaXMuYnRuMiwKICAgICAgICAgIHRoaXMuYnRuMywKICAgICAgICAgIHRoaXMuYnRuNCwKICAgICAgICAgIHRoaXMuYnRuNQogICAgICAgICk7CiAgICAgIH0pOwogICAgfSwKICAgIC8qKiDmn6Xor6LorrrmlofliJfooaggKi8KICAgIGdldExpc3QoKSB7CiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgIGxpc3RPcGluaW9uKHRoaXMucXVlcnlQYXJhbXMpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMub3Bpbmlvbkxpc3QgPSByZXNwb25zZS5yb3dzOwogICAgICAgIHRoaXMudG90YWwgPSByZXNwb25zZS50b3RhbDsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g6K665paH57qn5Yir5a2X5YW457+76K+RCiAgICB0aGVzaXNUeXBlRm9ybWF0KHJvdywgY29sdW1uKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdERpY3RMYWJlbCh0aGlzLnRoZXNpc1R5cGVPcHRpb25zLCByb3cudGhlc2lzVHlwZSk7CiAgICB9LAogICAgLy8g5YiK54mp562J57qn5a2X5YW457+76K+RCiAgICB0aGVzaXNHcmFkZUZvcm1hdChyb3csIGNvbHVtbikgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3REaWN0TGFiZWwodGhpcy50aGVzaXNHcmFkZU9wdGlvbnMsIHJvdy50aGVzaXNHcmFkZSk7CiAgICB9LAogICAgLy8g5ouF5Lu76IGM5Yqh5a2X5YW457+76K+RCiAgICBwb3NpdGlvbkZvcm1hdChyb3csIGNvbHVtbikgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3REaWN0TGFiZWwodGhpcy5wb3NpdGlvbk9wdGlvbnMsIHJvdy5wb3NpdGlvbik7CiAgICB9LAogICAgLy8g5piv5ZCm57uf6K6h5rqQ5pyf5YiK5a2X5YW457+76K+RCiAgICBpc0V4dGVuc2lvbkZvcm1hdChyb3csIGNvbHVtbikgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3REaWN0TGFiZWwodGhpcy5pc0V4dGVuc2lvbk9wdGlvbnMsIHJvdy5pc0V4dGVuc2lvbik7CiAgICB9LAogICAgLy8g5by55qGG5YWz6ZetCiAgICBoYW5kbGVEaWFsb2dDbG9zZSgpIHsKICAgICAgdGhpcy4kZW1pdCgiY2FuY2VsIiwgZmFsc2UpOwogICAgfSwKICAgIC8vIOWPlua2iAogICAgY2FuY2VsKCkgewogICAgICB0aGlzLiRlbWl0KCJjYW5jZWwiLCBmYWxzZSk7CiAgICB9LAogICAgLy8g6KGo5Y2V6YeN572uCiAgICByZXNldCgpIHsKICAgICAgdGhpcy5mb3JtID0gewogICAgICAgIGlkOiBudWxsLAogICAgICAgIGNvbXBDb2RlOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLnVzZXJJbmZvLmRlcHRJZCwKICAgICAgICBhY2NvdW50Q29kZTogbnVsbCwKICAgICAgICB0aGVzaXNDb2RlOiBudWxsLAogICAgICAgIHRoZXNpc05hbWU6IG51bGwsCiAgICAgICAgZGVwdENvZGU6IG51bGwsCiAgICAgICAgeWVhcjogbnVsbCwKICAgICAgICB0aGVzaXNUeXBlOiBudWxsLAogICAgICAgIHBlcnNvbkNvZGU6IG51bGwsCiAgICAgICAgdGhlc2lzU3ViamVjdDogbnVsbCwKICAgICAgICBpc3NuOiBudWxsLAogICAgICAgIHRoZXNpc0NvbHVtbjogbnVsbCwKICAgICAgICB0aGVzaXNHcmFkZTogbnVsbCwKICAgICAgICB0aGVzaXNZZWFyOiBudWxsLAogICAgICAgIHRoZXNpc1N0YWdlOiBudWxsLAogICAgICAgIHRoZXNpc1ZvbHVtZTogbnVsbCwKICAgICAgICBwdWJsaXNoOiBudWxsLAogICAgICAgIHBvc2l0aW9uOiBudWxsLAogICAgICAgIGlzRXh0ZW5zaW9uOiBudWxsLAogICAgICAgIHB1Ymxpc1RpbWU6IG51bGwsCiAgICAgICAgbWVldE5hbWU6IG51bGwsCiAgICAgICAgbWVldFRpbWU6IG51bGwsCiAgICAgICAgYW5uZXg6IG51bGwsCiAgICAgICAgYXVkaXRTdGF0ZTogbnVsbCwKICAgICAgICBwcm9jZWR1cmVJZDogbnVsbCwKICAgICAgICBkZWxGbGFnOiBudWxsLAogICAgICAgIGNyZWF0ZUJ5OiBudWxsLAogICAgICAgIGNyZWF0ZVRpbWU6IG51bGwsCiAgICAgICAgdXBkYXRlQnk6IG51bGwsCiAgICAgICAgdXBkYXRlVGltZTogbnVsbCwKICAgICAgICByZW1hcms6IG51bGwKICAgICAgfTsKICAgICAgdGhpcy5yZXNldEZvcm0oImZvcm0iKTsKICAgIH0sCiAgICAvKiog5o+Q5Lqk5oyJ6ZKuICovCiAgICBzdWJtaXRGb3JtKCkgewogICAgICB0aGlzLiRyZWZzWyJmb3JtIl0udmFsaWRhdGUodmFsaWQgPT4gewogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgdGhpcy5mb3JtLmNvbXBDb2RlID0gdGhpcy4kc3RvcmUuc3RhdGUudXNlci51c2VySW5mby5kZXB0SWQ7CiAgICAgICAgbGV0IHNhdmVMb2FkaW5nID0gdGhpcy5zYXZlTG9hZGluZygpOwogICAgICAgICAgaWYgKHRoaXMuZm9ybS5pZCAhPSBudWxsKSB7CiAgICAgICAgICAgIHVwZGF0ZVRoZXNpcyh0aGlzLmZvcm0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgIHRoaXMubXNnU3VjY2Vzcygi5L+u5pS55oiQ5YqfIik7CiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgic3VjY2VzcyIsIGZhbHNlKTsKICAgICAgICAgICAgICBzYXZlTG9hZGluZy5jbG9zZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZFRoZXNpcyh0aGlzLmZvcm0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgIHRoaXMubXNnU3VjY2Vzcygi5paw5aKe5oiQ5YqfIik7CiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgic3VjY2VzcyIsIGZhbHNlKTsKICAgICAgICAgICAgICBzYXZlTG9hZGluZy5jbG9zZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHN1Ym1pdEZvcm1Db250aW51ZSgpIHsKICAgICAgdGhpcy4kcmVmc1siZm9ybSJdLnZhbGlkYXRlKHZhbGlkID0+IHsKICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgIC8vIOS4i+e6p+WuoeaguOS6uuW8ueahhgogICAgICAgICAgdGhpcy5zaG93RGlhbG9nID0gdHJ1ZQogICAgICAgIH1lbHNlewogICAgICAgICAgdGhpcy5tc2dFcnJvcigi6K+36L6T5YWl5b+F5aGr6aG5Iik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBmb3JtSXRlbVN1Y2Nlc3MoZGF0YSkgewogICAgICB0aGlzLmZvcm0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKQogICAgICB0aGlzLmZvcm0uY29tcENvZGUgPSB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLnVzZXJJbmZvLmRlcHRJZDsKICAgICAgbGV0IHNhdmVMb2FkaW5nID0gdGhpcy5zYXZlTG9hZGluZygpOwogICAgICB1cGRhdGVUaGVzaXMxKHRoaXMuZm9ybSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5tc2dTdWNjZXNzKCLkv67mlLnmiJDlip8iKTsKICAgICAgICB0aGlzLiRlbWl0KCJzdWNjZXNzIiwgZmFsc2UpOwogICAgICAgIHNhdmVMb2FkaW5nLmNsb3NlKCkKICAgICAgfSkuY2F0Y2goKCk9PnsKICAgICAgICBzYXZlTG9hZGluZy5jbG9zZSgpCiAgICAgIH0pOwoKICAgIH0sCn19Owo="},null]}
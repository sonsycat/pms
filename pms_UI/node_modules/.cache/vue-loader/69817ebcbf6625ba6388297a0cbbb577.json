{"remainingRequest":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HRP_JAVA_pms\\pms_UI\\src\\views\\apportionment\\dictionary\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HRP_JAVA_pms\\pms_UI\\src\\views\\apportionment\\dictionary\\index.vue","mtime":1693362204121},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
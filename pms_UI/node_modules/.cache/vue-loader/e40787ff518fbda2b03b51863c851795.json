{"remainingRequest":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\pms_UI\\src\\views\\revenue\\apport\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\pms_UI\\src\\views\\revenue\\apport\\index.vue","mtime":1693362205850},{"path":"F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIGxpc3RBcHBvcnQsIGdldEFwcG9ydCwgZGVsQXBwb3J0LCBhZGRBcHBvcnQsIHVwZGF0ZUFwcG9ydCwgZXhwb3J0QXBwb3J0LAppbXBvcnQgeyBnZXRQcmVMaXN0LCBnZXRBZnRlckxpc3R9IGZyb20gIkAvYXBpL3JldmVudWUvYXBwb3J0IjsKaW1wb3J0IGFkZEVkaXQgZnJvbSAiLi9hZGRFZGl0IjsKaW1wb3J0IGRldGFpbCBmcm9tICIuL2RldGFpbCI7CmltcG9ydCB7Z2V0WWVhck1vbnRoMn0gZnJvbSAiQC91dGlscy9kYXRlIjsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQXBwb3J0IiwKICBjb21wb25lbnRzOiB7CiAgICBhZGRFZGl0LAogICAgZGV0YWlsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aXZlTmFtZToncmVzb2x2ZVByZScsCiAgICAgIHByZUxvYWRpbmc6IGZhbHNlLAogICAgICBhZnRlckxvYWRpbmc6IGZhbHNlLAogICAgICBzaW5nbGU6dHJ1ZSwKICAgICAgLy8g5a+85Ye66YGu572p5bGCCiAgICAgIGV4cG9ydExvYWRpbmc6IGZhbHNlLAogICAgICAvLyDmmL7npLrmkJzntKLmnaHku7YKICAgICAgc2hvd1NlYXJjaDogdHJ1ZSwKICAgICAgLy8g5oC75p2h5pWwCiAgICAgIHRvdGFsOiAwLAogICAgICBhZnRlclRvdGFsOjAsCiAgICAgIC8vIOaUtuWFpeeUn+aIkOihqOagvOaVsOaNrgogICAgICBhcHBvcnRMaXN0OiBbXSwKICAgICAgYXBwb3J0TGlzdE5leHQ6W10sCiAgICAgIHNlbGVjdGlvblJvdzogW10sCiAgICAgIGVjaGFydHNQcmVMaXN0OltdLAogICAgICBlY2hhcnRzQWZ0ZXJMaXN0OltdLAogICAgICAvLyDlvLnlh7rlsYLmoIfpopgKICAgICAgdGl0bGU6ICIiLAogICAgICAvLyDmmK/lkKbmmL7npLrlvLnlh7rlsYIKICAgICAgb3BlbjogZmFsc2UsCiAgICAgIGRldGFpbE9wZW46ZmFsc2UsCiAgICAgIHR5cGU6J3Jlc29sdmVCZWZvcmUnLAogICAgICAvLyDnu5PnrpfmoIfor4YoMSzmraPluLgsMumZhOWKoOaUtuWFpSnlrZflhbgKICAgICAgc2V0dGxlVHlwZU9wdGlvbnM6IFtdLAogICAgICAvLyDmn6Xor6Llj4LmlbAKICAgICAgcXVlcnlQYXJhbXM6IHsKICAgICAgICBwYWdlTnVtOiAxLAogICAgICAgIHBhZ2VTaXplOiAzMCwKICAgICAgICBjb21wQ29kZTogdGhpcy4kc3RvcmUuc3RhdGUudXNlci5hY2NvdW50SW5mby5kZXB0SWQsCiAgICAgICAgYWNjb3VudENvZGU6IG51bGwsCiAgICAgICAgcmV2ZW51ZUNvZGU6IG51bGwsCiAgICAgICAgcmVjZWl2ZU51bTogbnVsbCwKICAgICAgICBhY3R1YWxOdW06IG51bGwsCiAgICAgICAgZHBldENvZGU6IG51bGwsCiAgICAgICAgb2NjdXJlVGltZTogZ2V0WWVhck1vbnRoMigpLAogICAgICAgIHJldmVudWVUeXBlOiBudWxsLAogICAgICAgIHJldmVudWVLaW5kOiBudWxsLAogICAgICAgIHNldHRsZVR5cGU6IG51bGwsCiAgICAgICAgc2V0dGxlTWFyazogbnVsbAogICAgICB9LAogICAgICAvLyDooajljZXlj4LmlbAKICAgICAgZm9ybToge30sCiAgICAgIC8vIOihqOWNleagoemqjAogICAgICBydWxlczogewogICAgICB9CiAgICB9OwogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0UHJlTGlzdCgpOwogICAgdGhpcy5nZXREaWN0cygicG1zX2pzYnNfdHlwZSIpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICB0aGlzLnNldHRsZVR5cGVPcHRpb25zID0gcmVzcG9uc2UuZGF0YTsKICAgIH0pOwogIH0sCiAgbW91bnRlZCgpewogIH0sCiAgbWV0aG9kczogewogICAgaGFuZGxlQ2xpY2tUYWJsZU5hbWUocm93KXsKICAgICAgaWYodGhpcy5hY3RpdmVOYW1lPT0icmVzb2x2ZVByZSIpewogICAgICAgIHRoaXMucm93Q2xpY2tCZWZvcmUocm93KTsKICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZShyb3cpOwogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLnJvd0NsaWNrQWZ0ZXIocm93KTsKICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZShyb3cpOwogICAgICB9CiAgICB9LAogICAgaGFuZGxlQ2xpY2sodGFiLCBldmVudCkgewogICAgICBpZih0YWIubGFiZWw9PSLliIbop6PlkI4iKXsKICAgICAgICB0aGlzLmdldEFmdGVyTGlzdCgpOwogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLmdldFByZUxpc3QoKTsKICAgICAgfQogICAgfSwKICAgIGdldFByZUxpc3QoKXsKICAgICAgdGhpcy5wcmVMb2FkaW5nPXRydWU7CiAgICAgIGdldFByZUxpc3QodGhpcy5xdWVyeVBhcmFtcykudGhlbihyZXNwb25zZT0+ewogICAgICAgIGlmKHJlc3BvbnNlLmNvZGU9PTIwMCl7CiAgICAgICAgICB0aGlzLmFwcG9ydExpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLnJvd3MpKTsKICAgICAgICAgIHRoaXMudG90YWw9cmVzcG9uc2UudG90YWw7CiAgICAgICAgICBsZXQgZGF0YT1yZXNwb25zZS5yb3dzLm1hcChfPT57CiAgICAgICAgICAgIF8ubmFtZT1fLm5hbWUgKyAnIO+/pScgKyBfLnZhbHVlOwogICAgICAgICAgICByZXR1cm4gXwogICAgICAgICAgfSkKICAgICAgICAgIHRoaXMuZWNoYXJ0c1ByZUxpc3Q9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSkKICAgICAgICAgIHRoaXMuZWNoYXJ0c1ByZUxpc3QucG9wKCkKICAgICAgICAgIHRoaXMuaW5pdENoYXJ0cygpOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFwcG9ydExpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBmb3IgKHZhciBqIGluIHRoaXMuYXBwb3J0TGlzdFtpXSkgewogICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgdGhpcy5hcHBvcnRMaXN0W2ldW2pdKSA9PSAibnVtYmVyIiAmJiB0aGlzLmFwcG9ydExpc3RbaV1bal0gIT0gMCAmJiBqIT0iaWQiKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYXBwb3J0TGlzdFtpXVtqXSA9IHRoaXMubW9uZXlGb3JtYXQodGhpcy5hcHBvcnRMaXN0W2ldW2pdKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMucHJlTG9hZGluZz1mYWxzZTsKICAgICAgICB9CiAgICAgIH0pCiAgICB9LAogICAgZ2V0QWZ0ZXJMaXN0KCl7CiAgICAgIHRoaXMuYWZ0ZXJMb2FkaW5nPXRydWU7CiAgICAgIGdldEFmdGVyTGlzdCh0aGlzLnF1ZXJ5UGFyYW1zKS50aGVuKHJlc3BvbnNlPT57CiAgICAgICAgaWYocmVzcG9uc2UuY29kZT09MjAwKXsKICAgICAgICAgIHRoaXMuYXBwb3J0TGlzdE5leHQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLnJvd3MpKTsKICAgICAgICAgIHRoaXMuYWZ0ZXJUb3RhbD1yZXNwb25zZS50b3RhbDsKICAgICAgICAgIGxldCBkYXRhPXJlc3BvbnNlLnJvd3MubWFwKF89PnsKICAgICAgICAgICAgXy5uYW1lPV8ubmFtZSArICcg77+lJyArIF8udmFsdWU7CiAgICAgICAgICAgIHJldHVybiBfCiAgICAgICAgICB9KQogICAgICAgICAgdGhpcy5lY2hhcnRzQWZ0ZXJMaXN0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICAgICAgdGhpcy5lY2hhcnRzQWZ0ZXJMaXN0LnBvcCgpCiAgICAgICAgICB0aGlzLmluaXRDaGFydHNOZXh0KCk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXBwb3J0TGlzdE5leHQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBmb3IgKHZhciBqIGluIHRoaXMuYXBwb3J0TGlzdE5leHRbaV0pIHsKICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIHRoaXMuYXBwb3J0TGlzdE5leHRbaV1bal0pID09ICJudW1iZXIiICYmIHRoaXMuYXBwb3J0TGlzdE5leHRbaV1bal0gIT0gMCAmJiBqIT0iaWQiKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYXBwb3J0TGlzdE5leHRbaV1bal0gPSB0aGlzLm1vbmV5Rm9ybWF0KHRoaXMuYXBwb3J0TGlzdE5leHRbaV1bal0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5hZnRlckxvYWRpbmc9ZmFsc2UKICAgICAgICB9CiAgICAgIH0pCiAgICB9LAogICAgLy/mm7TmlrDooajmoLzmlbDmja4KICAgIGZyZXNoVGFibGUoKXsKICAgICAgaWYodGhpcy5hY3RpdmVOYW1lPT0icmVzb2x2ZVByZSIpewogICAgICAgIHRoaXMuZ2V0UHJlTGlzdCgpOwogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLmdldEFmdGVyTGlzdCgpOwogICAgICB9CiAgICB9LAogICAgLy8g5aSa6YCJ5qGG6YCJ5Lit5pWw5o2uCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2VCZWZvcmUoc2VsZWN0aW9uKSB7CiAgICAgIGlmKHNlbGVjdGlvblswXSYmc2VsZWN0aW9uWzBdLm5hbWU9PSflkIjorqEnKXsKICAgICAgICB0aGlzLnNpbmdsZT10cnVlCiAgICAgIH1lbHNlewogICAgICAgIHRoaXMuc2luZ2xlID0gc2VsZWN0aW9uLmxlbmd0aCE9PTEKICAgICAgICB0aGlzLnNlbGVjdGlvblJvdz1zZWxlY3Rpb247CiAgICAgIH0KICAgIH0sCiAgICByb3dDbGlja0JlZm9yZShyb3csIGNvbHVtbiwgZXZlbnQpIHsKICAgICAgbGV0IHJlZnNFbFRhYmxlID0gdGhpcy4kcmVmcy5tdWx0aXBsZVRhYmxlUHJlOwogICAgICBsZXQgZmluZFJvdyA9IHRoaXMuc2VsZWN0aW9uUm93LmZpbmQoYyA9PiBjLnJvd0luZGV4ID09IHJvdy5yb3dJbmRleCk7CiAgICAgIGlmIChmaW5kUm93ICYmIHRoaXMuc2VsZWN0aW9uUm93Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2VBZnRlcihzZWxlY3Rpb24pIHsKICAgICAgaWYoc2VsZWN0aW9uWzBdJiZzZWxlY3Rpb25bMF0ubmFtZT09J+WQiOiuoScpewogICAgICAgIHRoaXMuc2luZ2xlPXRydWUKICAgICAgfWVsc2V7CiAgICAgICAgdGhpcy5zaW5nbGUgPSBzZWxlY3Rpb24ubGVuZ3RoIT09MQogICAgICAgIHRoaXMuc2VsZWN0aW9uUm93PXNlbGVjdGlvbjsKICAgICAgfQogICAgfSwKICAgIHJvd0NsaWNrQWZ0ZXIocm93LCBjb2x1bW4sIGV2ZW50KSB7CiAgICAgIGxldCByZWZzRWxUYWJsZSA9IHRoaXMuJHJlZnMubXVsdGlwbGVUYWJsZUFmdGVyOwogICAgICBsZXQgZmluZFJvdyA9IHRoaXMuc2VsZWN0aW9uUm93LmZpbmQoYyA9PiBjLnJvd0luZGV4ID09IHJvdy5yb3dJbmRleCk7CiAgICAgIGlmIChmaW5kUm93ICYmIHRoaXMuc2VsZWN0aW9uUm93Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICAvLyDnu5PnrpfmoIfor4YoMSzmraPluLgsMumZhOWKoOaUtuWFpSnlrZflhbjnv7vor5EKICAgIHNldHRsZVR5cGVGb3JtYXQocm93LCBjb2x1bW4pIHsKICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0RGljdExhYmVsKHRoaXMuc2V0dGxlVHlwZU9wdGlvbnMsIHJvdy5zZXR0bGVUeXBlKTsKICAgIH0sCiAgICBpbml0Q2hhcnRzICgpIHsKICDjgIDjgIBsZXQgbXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLmNoYXJ0KTsKICDjgIDjgIAvLyDnu5jliLblm77ooagKICDjgIDjgIBteUNoYXJ0LnNldE9wdGlvbih7CiAgICDjgIAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAnJywKICAgICAgICAgIHN1YnRleHQ6ICcnLAogICAgICAgICAgbGVmdDogJ2NlbnRlcicKICAgICAgICB9LAogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICdpdGVtJywKICAgICAgICAgIGZvcm1hdHRlcjogJ3tifScKICAgICAgICB9LAogICAgICAgIGxlZ2VuZDogewogICAgICAgICAgb3JpZW50OiAndmVydGljYWwnLAogICAgICAgICAgbGVmdDogJ2xlZnQnLAogICAgICAgICAgYm90dG9tOjAsCiAgICAgICAgfSwKICAgICAgICBjb2xvckJ5OidzZXJpZXMnLAogICAgICAgIGNvbG9yOlsnIzY2YjNmZicsJyM5MWNjNzUnLCcjZmFjODU4JywnI2VlNjY2NicsJyM3M2MwZGUnLCcjM2JhMjcyJywnI2ZjODQ1MicsJyM5YTYwYjQnLCcjZWE3Y2NjJ10sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgICB0eXBlOiAncGllJywKICAgICAgICAgICAgcmFkaXVzOiAnNjAlJywKICAgICAgICAgICAgZGF0YTogdGhpcy5lY2hhcnRzUHJlTGlzdCwKICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICAgIHNoYWRvd0JsdXI6IDEwLAogICAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0WDogMCwKICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgIOOAgH0pOwogICAgfSwKICAgIGluaXRDaGFydHNOZXh0ICgpIHsKICDjgIDjgIBsZXQgbXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLmNoYXJ0TmV4dCk7CiAg44CA44CALy8g57uY5Yi25Zu+6KGoCiAg44CA44CAbXlDaGFydC5zZXRPcHRpb24oewogICAg44CAICB0aXRsZTogewogICAgICAgICAgdGV4dDogJycsCiAgICAgICAgICBzdWJ0ZXh0OiAnJywKICAgICAgICAgIGxlZnQ6ICdjZW50ZXInCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScsCiAgICAgICAgICBmb3JtYXR0ZXI6ICd7Yn0nCiAgICAgICAgfSwKICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgIG9yaWVudDogJ3ZlcnRpY2FsJywKICAgICAgICAgIGxlZnQ6ICdsZWZ0JywKICAgICAgICAgIGJvdHRvbTowLAogICAgICAgIH0sCiAgICAgICAgY29sb3JCeTonc2VyaWVzJywKICAgICAgICBjb2xvcjpbJyM2NmIzZmYnLCcjOTFjYzc1JywnI2ZhYzg1OCcsJyNlZTY2NjYnLCcjNzNjMGRlJywnIzNiYTI3MicsJyNmYzg0NTInLCcjOWE2MGI0JywnI2VhN2NjYyddLAogICAgICAgIHNlcmllczogWwogICAgICAgICAgewogICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgdHlwZTogJ3BpZScsCiAgICAgICAgICAgIHJhZGl1czogJzYwJScsCiAgICAgICAgICAgIGRhdGE6IHRoaXMuZWNoYXJ0c0FmdGVyTGlzdCwKICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICAgIHNoYWRvd0JsdXI6IDEwLAogICAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0WDogMCwKICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgIOOAgH0pOwogICAgfSwKCSAgc3VjY2Vzc1N1Ym1pdChmbGFnKSB7CiAgICAgIHRoaXMub3BlbiA9IGZsYWc7CiAgICAgIHRoaXMuZnJlc2hUYWJsZSgpOwogICAgfSwKICAgIC8vIOWPlua2iOaMiemSrgogICAgY2FuY2VsKCkgewogICAgICB0aGlzLm9wZW4gPSBmYWxzZTsKICAgICAgdGhpcy5mcmVzaFRhYmxlKCk7CiAgICB9LAogICAgc3VjY2Vzc1N1Ym1pdERldGFpbChmbGFnKSB7CiAgICAgIHRoaXMuZGV0YWlsT3BlbiA9IGZsYWc7CiAgICAgIHRoaXMuZnJlc2hUYWJsZSgpOwogICAgfSwKICAgIC8vIOWPlua2iOaMiemSrgogICAgY2FuY2VsRGV0YWlsKCkgewogICAgICB0aGlzLmRldGFpbE9wZW4gPSBmYWxzZTsKICAgICAgdGhpcy5mcmVzaFRhYmxlKCk7CiAgICB9LAogICAgLy8g6KGo5Y2V6YeN572uCiAgICByZXNldCgpIHsKICAgICAgdGhpcy5mb3JtID0gewogICAgICAgIGlkOiBudWxsLAogICAgICAgIGNvbXBDb2RlOiBudWxsLAogICAgICAgIGFjY291bnRDb2RlOiBudWxsLAogICAgICAgIHJldmVudWVDb2RlOiBudWxsLAogICAgICAgIHJlY2VpdmVOdW06IG51bGwsCiAgICAgICAgYWN0dWFsTnVtOiBudWxsLAogICAgICAgIGRwZXRDb2RlOiBudWxsLAogICAgICAgIG9jY3VyZVRpbWU6IGdldFllYXJNb250aDIoKSwKICAgICAgICByZXZlbnVlVHlwZTogbnVsbCwKICAgICAgICByZXZlbnVlS2luZDogbnVsbCwKICAgICAgICBkZWxGbGFnOiBudWxsLAogICAgICAgIGNyZWF0ZUJ5OiBudWxsLAogICAgICAgIGNyZWF0ZVRpbWU6IG51bGwsCiAgICAgICAgdXBkYXRlQnk6IG51bGwsCiAgICAgICAgdXBkYXRlVGltZTogbnVsbCwKICAgICAgICByZW1hcms6IG51bGwsCiAgICAgICAgc2V0dGxlVHlwZTogbnVsbAogICAgICB9OwogICAgfSwKICAgIC8qKiDmkJzntKLmjInpkq7mk43kvZwgKi8KICAgIGhhbmRsZVF1ZXJ5KCkgewogICAgICB0aGlzLnF1ZXJ5UGFyYW1zLnBhZ2VOdW0gPSAxOwogICAgICB0aGlzLmZyZXNoVGFibGUoKTsKICAgIH0sCiAgICAvKiog6YeN572u5oyJ6ZKu5pON5L2cICovCiAgICByZXNldFF1ZXJ5KCkgewogICAgICB0aGlzLnJlc2V0Rm9ybSgicXVlcnlGb3JtIik7CiAgICAgIHRoaXMuYWN0aXZlTmFtZT0ncmVzb2x2ZVByZSc7CiAgICAgIHRoaXMuZnJlc2hUYWJsZSgpOwogICAgfSwKICAgIHJvd1N0eWxlKHsKICAgICAgcm93LAogICAgICByb3dJbmRleAogICAgfSkgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm93LCAncm93SW5kZXgnLCB7CiAgICAgICAgdmFsdWU6IHJvd0luZGV4LAogICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgICB9KQogICAgfSwKICAgIHJvd0NsYXNzTmFtZSh7CiAgICAgIHJvdywKICAgICAgcm93SW5kZXgKICAgIH0pIHsKICAgICAgbGV0IHJvd05hbWUgPSAiIiwKICAgICAgICBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3cuZmluZChjID0+IGMucm93SW5kZXggPT09IHJvdy5yb3dJbmRleCk7CiAgICAgIGlmIChmaW5kUm93KSB7CiAgICAgICAgcm93TmFtZSA9ICJjdXJyZW50LXJvdyAiOwogICAgICB9CiAgICAgIHJldHVybiByb3dOYW1lOwogICAgfSwKICAgIC8qKiDmlrDlop7mjInpkq7mk43kvZwgKi8KICAgIGhhbmRsZUFkZCgpIHsKICAgICAgdGhpcy5vcGVuID0gdHJ1ZTsKICAgICAgdGhpcy50aXRsZSA9ICLmt7vliqDmlLblhaXnlJ/miJAiOwogICAgfSwKCiAgICAvL+aYjue7hgogICAgaGFuZGxlVXBkYXRlKHJvdykgewogICAgICB0aGlzLnJlc2V0KCkKICAgICAgbGV0IG9iaj17fTsKICAgICAgICBzd2l0Y2godGhpcy5zZWxlY3Rpb25Sb3dbMF0ubmFtZSl7CiAgICAgICAgICBjYXNlICfpl6jor4rmlLblhaUnOgogICAgICAgICAgb2JqPXsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6MSwKICAgICAgICAgICAgcmV2ZW51ZUtpbmQ6MSwKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgJ+mXqOiviumZhOWKoOaUtuWFpSc6CiAgICAgICAgICBvYmo9ewogICAgICAgICAgICByZXZlbnVlVHlwZToxLAogICAgICAgICAgICByZXZlbnVlS2luZDoyLAogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAn5L2P6Zmi5pS25YWlJzoKICAgICAgICAgIG9iaj17CiAgICAgICAgICAgIHJldmVudWVUeXBlOjIsCiAgICAgICAgICAgIHJldmVudWVLaW5kOjEsCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICfkvY/pmaLpmYTliqDmlLblhaUnOgogICAgICAgICAgb2JqPXsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6MiwKICAgICAgICAgICAgcmV2ZW51ZUtpbmQ6MiwKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBvYmo9e30KICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIGlmKHRoaXMuYWN0aXZlTmFtZT09InJlc29sdmVOZXh0Iil7CiAgICAgICAgdGhpcy50eXBlPSdyZXNvbHZlQWZ0ZXInOwogICAgICAgIHRoaXMuZm9ybT17CiAgICAgICAgICBwYWdlTnVtOiAxLAogICAgICAgICAgcGFnZVNpemU6IDMwLAogICAgICAgICAgY29tcENvZGU6IHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuYWNjb3VudEluZm8uZGVwdElkLAogICAgICAgICAgb1RpbWU6dGhpcy5xdWVyeVBhcmFtcy5vY2N1cmVUaW1lLAogICAgICAgICAgc2V0dGxlVHlwZTp0aGlzLnF1ZXJ5UGFyYW1zLnNldHRsZVR5cGUsCiAgICAgICAgICAuLi5vYmoKICAgICAgICB9CiAgICAgIH1lbHNlewogICAgICAgIHRoaXMudHlwZT0ncmVzb2x2ZUJlZm9yZSc7CiAgICAgICAgdGhpcy5mb3JtPXsKICAgICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgICBwYWdlU2l6ZTogMzAsCiAgICAgICAgICBjb21wQ29kZTogdGhpcy4kc3RvcmUuc3RhdGUudXNlci5hY2NvdW50SW5mby5kZXB0SWQsCiAgICAgICAgICBvY2N1cmVUOnRoaXMucXVlcnlQYXJhbXMub2NjdXJlVGltZSwKICAgICAgICAgIHNldHRsZU1hcms6dGhpcy5xdWVyeVBhcmFtcy5zZXR0bGVUeXBlLAogICAgICAgICAgLi4ub2JqCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuZGV0YWlsT3BlbiA9IHRydWU7CiAgICB9LAogIH0KfTsK"},null]}
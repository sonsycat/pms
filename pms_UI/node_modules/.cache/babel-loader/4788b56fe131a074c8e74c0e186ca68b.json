{"remainingRequest":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\babel-loader\\lib\\index.js!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HRP_JAVA_pms\\pms_UI\\src\\layout\\components\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HRP_JAVA_pms\\pms_UI\\src\\layout\\components\\Navbar.vue","mtime":1726736573645},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\babel.config.js","mtime":1693361824517},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1693362167329},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
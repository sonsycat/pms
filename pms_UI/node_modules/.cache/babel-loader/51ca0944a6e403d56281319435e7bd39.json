{"remainingRequest":"F:\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js!F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js!F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\pms_UI\\src\\views\\revenue\\apport\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\pms_UI\\src\\views\\revenue\\apport\\index.vue","mtime":1693362205850},{"path":"F:\\pms_UI\\babel.config.js","mtime":1693361824517},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1693362167329},{"path":"F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRjovcG1zX1VJL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwoKLy8gbGlzdEFwcG9ydCwgZ2V0QXBwb3J0LCBkZWxBcHBvcnQsIGFkZEFwcG9ydCwgdXBkYXRlQXBwb3J0LCBleHBvcnRBcHBvcnQsCmltcG9ydCB7IGdldFByZUxpc3QgYXMgX2dldFByZUxpc3QsIGdldEFmdGVyTGlzdCBhcyBfZ2V0QWZ0ZXJMaXN0IH0gZnJvbSAiQC9hcGkvcmV2ZW51ZS9hcHBvcnQiOwppbXBvcnQgYWRkRWRpdCBmcm9tICIuL2FkZEVkaXQiOwppbXBvcnQgZGV0YWlsIGZyb20gIi4vZGV0YWlsIjsKaW1wb3J0IHsgZ2V0WWVhck1vbnRoMiB9IGZyb20gIkAvdXRpbHMvZGF0ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQXBwb3J0IiwKICBjb21wb25lbnRzOiB7CiAgICBhZGRFZGl0OiBhZGRFZGl0LAogICAgZGV0YWlsOiBkZXRhaWwKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhY3RpdmVOYW1lOiAncmVzb2x2ZVByZScsCiAgICAgIHByZUxvYWRpbmc6IGZhbHNlLAogICAgICBhZnRlckxvYWRpbmc6IGZhbHNlLAogICAgICBzaW5nbGU6IHRydWUsCiAgICAgIC8vIOWvvOWHuumBrue9qeWxggogICAgICBleHBvcnRMb2FkaW5nOiBmYWxzZSwKICAgICAgLy8g5pi+56S65pCc57Si5p2h5Lu2CiAgICAgIHNob3dTZWFyY2g6IHRydWUsCiAgICAgIC8vIOaAu+adoeaVsAogICAgICB0b3RhbDogMCwKICAgICAgYWZ0ZXJUb3RhbDogMCwKICAgICAgLy8g5pS25YWl55Sf5oiQ6KGo5qC85pWw5o2uCiAgICAgIGFwcG9ydExpc3Q6IFtdLAogICAgICBhcHBvcnRMaXN0TmV4dDogW10sCiAgICAgIHNlbGVjdGlvblJvdzogW10sCiAgICAgIGVjaGFydHNQcmVMaXN0OiBbXSwKICAgICAgZWNoYXJ0c0FmdGVyTGlzdDogW10sCiAgICAgIC8vIOW8ueWHuuWxguagh+mimAogICAgICB0aXRsZTogIiIsCiAgICAgIC8vIOaYr+WQpuaYvuekuuW8ueWHuuWxggogICAgICBvcGVuOiBmYWxzZSwKICAgICAgZGV0YWlsT3BlbjogZmFsc2UsCiAgICAgIHR5cGU6ICdyZXNvbHZlQmVmb3JlJywKICAgICAgLy8g57uT566X5qCH6K+GKDEs5q2j5bi4LDLpmYTliqDmlLblhaUp5a2X5YW4CiAgICAgIHNldHRsZVR5cGVPcHRpb25zOiBbXSwKICAgICAgLy8g5p+l6K+i5Y+C5pWwCiAgICAgIHF1ZXJ5UGFyYW1zOiB7CiAgICAgICAgcGFnZU51bTogMSwKICAgICAgICBwYWdlU2l6ZTogMzAsCiAgICAgICAgY29tcENvZGU6IHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuYWNjb3VudEluZm8uZGVwdElkLAogICAgICAgIGFjY291bnRDb2RlOiBudWxsLAogICAgICAgIHJldmVudWVDb2RlOiBudWxsLAogICAgICAgIHJlY2VpdmVOdW06IG51bGwsCiAgICAgICAgYWN0dWFsTnVtOiBudWxsLAogICAgICAgIGRwZXRDb2RlOiBudWxsLAogICAgICAgIG9jY3VyZVRpbWU6IGdldFllYXJNb250aDIoKSwKICAgICAgICByZXZlbnVlVHlwZTogbnVsbCwKICAgICAgICByZXZlbnVlS2luZDogbnVsbCwKICAgICAgICBzZXR0bGVUeXBlOiBudWxsLAogICAgICAgIHNldHRsZU1hcms6IG51bGwKICAgICAgfSwKICAgICAgLy8g6KGo5Y2V5Y+C5pWwCiAgICAgIGZvcm06IHt9LAogICAgICAvLyDooajljZXmoKHpqowKICAgICAgcnVsZXM6IHt9CiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICB0aGlzLmdldFByZUxpc3QoKTsKICAgIHRoaXMuZ2V0RGljdHMoInBtc19qc2JzX3R5cGUiKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBfdGhpcy5zZXR0bGVUeXBlT3B0aW9ucyA9IHJlc3BvbnNlLmRhdGE7CiAgICB9KTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7fSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVDbGlja1RhYmxlTmFtZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2tUYWJsZU5hbWUocm93KSB7CiAgICAgIGlmICh0aGlzLmFjdGl2ZU5hbWUgPT0gInJlc29sdmVQcmUiKSB7CiAgICAgICAgdGhpcy5yb3dDbGlja0JlZm9yZShyb3cpOwogICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlKHJvdyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5yb3dDbGlja0FmdGVyKHJvdyk7CiAgICAgICAgdGhpcy5oYW5kbGVVcGRhdGUocm93KTsKICAgICAgfQogICAgfSwKICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVDbGljayh0YWIsIGV2ZW50KSB7CiAgICAgIGlmICh0YWIubGFiZWwgPT0gIuWIhuino+WQjiIpIHsKICAgICAgICB0aGlzLmdldEFmdGVyTGlzdCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZ2V0UHJlTGlzdCgpOwogICAgICB9CiAgICB9LAogICAgZ2V0UHJlTGlzdDogZnVuY3Rpb24gZ2V0UHJlTGlzdCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMucHJlTG9hZGluZyA9IHRydWU7CiAgICAgIF9nZXRQcmVMaXN0KHRoaXMucXVlcnlQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUgPT0gMjAwKSB7CiAgICAgICAgICBfdGhpczIuYXBwb3J0TGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2Uucm93cykpOwogICAgICAgICAgX3RoaXMyLnRvdGFsID0gcmVzcG9uc2UudG90YWw7CiAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLnJvd3MubWFwKGZ1bmN0aW9uIChfKSB7CiAgICAgICAgICAgIF8ubmFtZSA9IF8ubmFtZSArICcg77+lJyArIF8udmFsdWU7CiAgICAgICAgICAgIHJldHVybiBfOwogICAgICAgICAgfSk7CiAgICAgICAgICBfdGhpczIuZWNoYXJ0c1ByZUxpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgICAgICAgIF90aGlzMi5lY2hhcnRzUHJlTGlzdC5wb3AoKTsKICAgICAgICAgIF90aGlzMi5pbml0Q2hhcnRzKCk7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzMi5hcHBvcnRMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGogaW4gX3RoaXMyLmFwcG9ydExpc3RbaV0pIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzMi5hcHBvcnRMaXN0W2ldW2pdID09ICJudW1iZXIiICYmIF90aGlzMi5hcHBvcnRMaXN0W2ldW2pdICE9IDAgJiYgaiAhPSAiaWQiKSB7CiAgICAgICAgICAgICAgICBfdGhpczIuYXBwb3J0TGlzdFtpXVtqXSA9IF90aGlzMi5tb25leUZvcm1hdChfdGhpczIuYXBwb3J0TGlzdFtpXVtqXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBfdGhpczIucHJlTG9hZGluZyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2V0QWZ0ZXJMaXN0OiBmdW5jdGlvbiBnZXRBZnRlckxpc3QoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB0aGlzLmFmdGVyTG9hZGluZyA9IHRydWU7CiAgICAgIF9nZXRBZnRlckxpc3QodGhpcy5xdWVyeVBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBpZiAocmVzcG9uc2UuY29kZSA9PSAyMDApIHsKICAgICAgICAgIF90aGlzMy5hcHBvcnRMaXN0TmV4dCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2Uucm93cykpOwogICAgICAgICAgX3RoaXMzLmFmdGVyVG90YWwgPSByZXNwb25zZS50b3RhbDsKICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2Uucm93cy5tYXAoZnVuY3Rpb24gKF8pIHsKICAgICAgICAgICAgXy5uYW1lID0gXy5uYW1lICsgJyDvv6UnICsgXy52YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIF87CiAgICAgICAgICB9KTsKICAgICAgICAgIF90aGlzMy5lY2hhcnRzQWZ0ZXJMaXN0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICAgICAgICBfdGhpczMuZWNoYXJ0c0FmdGVyTGlzdC5wb3AoKTsKICAgICAgICAgIF90aGlzMy5pbml0Q2hhcnRzTmV4dCgpOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpczMuYXBwb3J0TGlzdE5leHQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZm9yICh2YXIgaiBpbiBfdGhpczMuYXBwb3J0TGlzdE5leHRbaV0pIHsKICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzMy5hcHBvcnRMaXN0TmV4dFtpXVtqXSA9PSAibnVtYmVyIiAmJiBfdGhpczMuYXBwb3J0TGlzdE5leHRbaV1bal0gIT0gMCAmJiBqICE9ICJpZCIpIHsKICAgICAgICAgICAgICAgIF90aGlzMy5hcHBvcnRMaXN0TmV4dFtpXVtqXSA9IF90aGlzMy5tb25leUZvcm1hdChfdGhpczMuYXBwb3J0TGlzdE5leHRbaV1bal0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgX3RoaXMzLmFmdGVyTG9hZGluZyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy/mm7TmlrDooajmoLzmlbDmja4KICAgIGZyZXNoVGFibGU6IGZ1bmN0aW9uIGZyZXNoVGFibGUoKSB7CiAgICAgIGlmICh0aGlzLmFjdGl2ZU5hbWUgPT0gInJlc29sdmVQcmUiKSB7CiAgICAgICAgdGhpcy5nZXRQcmVMaXN0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5nZXRBZnRlckxpc3QoKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWkmumAieahhumAieS4reaVsOaNrgogICAgaGFuZGxlU2VsZWN0aW9uQ2hhbmdlQmVmb3JlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3Rpb25DaGFuZ2VCZWZvcmUoc2VsZWN0aW9uKSB7CiAgICAgIGlmIChzZWxlY3Rpb25bMF0gJiYgc2VsZWN0aW9uWzBdLm5hbWUgPT0gJ+WQiOiuoScpIHsKICAgICAgICB0aGlzLnNpbmdsZSA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaW5nbGUgPSBzZWxlY3Rpb24ubGVuZ3RoICE9PSAxOwogICAgICAgIHRoaXMuc2VsZWN0aW9uUm93ID0gc2VsZWN0aW9uOwogICAgICB9CiAgICB9LAogICAgcm93Q2xpY2tCZWZvcmU6IGZ1bmN0aW9uIHJvd0NsaWNrQmVmb3JlKHJvdywgY29sdW1uLCBldmVudCkgewogICAgICB2YXIgcmVmc0VsVGFibGUgPSB0aGlzLiRyZWZzLm11bHRpcGxlVGFibGVQcmU7CiAgICAgIHZhciBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3cuZmluZChmdW5jdGlvbiAoYykgewogICAgICAgIHJldHVybiBjLnJvd0luZGV4ID09IHJvdy5yb3dJbmRleDsKICAgICAgfSk7CiAgICAgIGlmIChmaW5kUm93ICYmIHRoaXMuc2VsZWN0aW9uUm93Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2VBZnRlcjogZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uQ2hhbmdlQWZ0ZXIoc2VsZWN0aW9uKSB7CiAgICAgIGlmIChzZWxlY3Rpb25bMF0gJiYgc2VsZWN0aW9uWzBdLm5hbWUgPT0gJ+WQiOiuoScpIHsKICAgICAgICB0aGlzLnNpbmdsZSA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaW5nbGUgPSBzZWxlY3Rpb24ubGVuZ3RoICE9PSAxOwogICAgICAgIHRoaXMuc2VsZWN0aW9uUm93ID0gc2VsZWN0aW9uOwogICAgICB9CiAgICB9LAogICAgcm93Q2xpY2tBZnRlcjogZnVuY3Rpb24gcm93Q2xpY2tBZnRlcihyb3csIGNvbHVtbiwgZXZlbnQpIHsKICAgICAgdmFyIHJlZnNFbFRhYmxlID0gdGhpcy4kcmVmcy5tdWx0aXBsZVRhYmxlQWZ0ZXI7CiAgICAgIHZhciBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3cuZmluZChmdW5jdGlvbiAoYykgewogICAgICAgIHJldHVybiBjLnJvd0luZGV4ID09IHJvdy5yb3dJbmRleDsKICAgICAgfSk7CiAgICAgIGlmIChmaW5kUm93ICYmIHRoaXMuc2VsZWN0aW9uUm93Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICAvLyDnu5PnrpfmoIfor4YoMSzmraPluLgsMumZhOWKoOaUtuWFpSnlrZflhbjnv7vor5EKICAgIHNldHRsZVR5cGVGb3JtYXQ6IGZ1bmN0aW9uIHNldHRsZVR5cGVGb3JtYXQocm93LCBjb2x1bW4pIHsKICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0RGljdExhYmVsKHRoaXMuc2V0dGxlVHlwZU9wdGlvbnMsIHJvdy5zZXR0bGVUeXBlKTsKICAgIH0sCiAgICBpbml0Q2hhcnRzOiBmdW5jdGlvbiBpbml0Q2hhcnRzKCkgewogICAgICB2YXIgbXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLmNoYXJ0KTsKICAgICAgLy8g57uY5Yi25Zu+6KGoCiAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dDogJycsCiAgICAgICAgICBzdWJ0ZXh0OiAnJywKICAgICAgICAgIGxlZnQ6ICdjZW50ZXInCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScsCiAgICAgICAgICBmb3JtYXR0ZXI6ICd7Yn0nCiAgICAgICAgfSwKICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgIG9yaWVudDogJ3ZlcnRpY2FsJywKICAgICAgICAgIGxlZnQ6ICdsZWZ0JywKICAgICAgICAgIGJvdHRvbTogMAogICAgICAgIH0sCiAgICAgICAgY29sb3JCeTogJ3NlcmllcycsCiAgICAgICAgY29sb3I6IFsnIzY2YjNmZicsICcjOTFjYzc1JywgJyNmYWM4NTgnLCAnI2VlNjY2NicsICcjNzNjMGRlJywgJyMzYmEyNzInLCAnI2ZjODQ1MicsICcjOWE2MGI0JywgJyNlYTdjY2MnXSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgIHR5cGU6ICdwaWUnLAogICAgICAgICAgcmFkaXVzOiAnNjAlJywKICAgICAgICAgIGRhdGE6IHRoaXMuZWNoYXJ0c1ByZUxpc3QsCiAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBzaGFkb3dCbHVyOiAxMCwKICAgICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiAwLAogICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfSk7CiAgICB9LAogICAgaW5pdENoYXJ0c05leHQ6IGZ1bmN0aW9uIGluaXRDaGFydHNOZXh0KCkgewogICAgICB2YXIgbXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLmNoYXJ0TmV4dCk7CiAgICAgIC8vIOe7mOWItuWbvuihqAogICAgICBteUNoYXJ0LnNldE9wdGlvbih7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHQ6ICcnLAogICAgICAgICAgc3VidGV4dDogJycsCiAgICAgICAgICBsZWZ0OiAnY2VudGVyJwogICAgICAgIH0sCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLAogICAgICAgICAgZm9ybWF0dGVyOiAne2J9JwogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBvcmllbnQ6ICd2ZXJ0aWNhbCcsCiAgICAgICAgICBsZWZ0OiAnbGVmdCcsCiAgICAgICAgICBib3R0b206IDAKICAgICAgICB9LAogICAgICAgIGNvbG9yQnk6ICdzZXJpZXMnLAogICAgICAgIGNvbG9yOiBbJyM2NmIzZmYnLCAnIzkxY2M3NScsICcjZmFjODU4JywgJyNlZTY2NjYnLCAnIzczYzBkZScsICcjM2JhMjcyJywgJyNmYzg0NTInLCAnIzlhNjBiNCcsICcjZWE3Y2NjJ10sCiAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICB0eXBlOiAncGllJywKICAgICAgICAgIHJhZGl1czogJzYwJScsCiAgICAgICAgICBkYXRhOiB0aGlzLmVjaGFydHNBZnRlckxpc3QsCiAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBzaGFkb3dCbHVyOiAxMCwKICAgICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiAwLAogICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfSk7CiAgICB9LAogICAgc3VjY2Vzc1N1Ym1pdDogZnVuY3Rpb24gc3VjY2Vzc1N1Ym1pdChmbGFnKSB7CiAgICAgIHRoaXMub3BlbiA9IGZsYWc7CiAgICAgIHRoaXMuZnJlc2hUYWJsZSgpOwogICAgfSwKICAgIC8vIOWPlua2iOaMiemSrgogICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwoKSB7CiAgICAgIHRoaXMub3BlbiA9IGZhbHNlOwogICAgICB0aGlzLmZyZXNoVGFibGUoKTsKICAgIH0sCiAgICBzdWNjZXNzU3VibWl0RGV0YWlsOiBmdW5jdGlvbiBzdWNjZXNzU3VibWl0RGV0YWlsKGZsYWcpIHsKICAgICAgdGhpcy5kZXRhaWxPcGVuID0gZmxhZzsKICAgICAgdGhpcy5mcmVzaFRhYmxlKCk7CiAgICB9LAogICAgLy8g5Y+W5raI5oyJ6ZKuCiAgICBjYW5jZWxEZXRhaWw6IGZ1bmN0aW9uIGNhbmNlbERldGFpbCgpIHsKICAgICAgdGhpcy5kZXRhaWxPcGVuID0gZmFsc2U7CiAgICAgIHRoaXMuZnJlc2hUYWJsZSgpOwogICAgfSwKICAgIC8vIOihqOWNlemHjee9rgogICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICB0aGlzLmZvcm0gPSB7CiAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgY29tcENvZGU6IG51bGwsCiAgICAgICAgYWNjb3VudENvZGU6IG51bGwsCiAgICAgICAgcmV2ZW51ZUNvZGU6IG51bGwsCiAgICAgICAgcmVjZWl2ZU51bTogbnVsbCwKICAgICAgICBhY3R1YWxOdW06IG51bGwsCiAgICAgICAgZHBldENvZGU6IG51bGwsCiAgICAgICAgb2NjdXJlVGltZTogZ2V0WWVhck1vbnRoMigpLAogICAgICAgIHJldmVudWVUeXBlOiBudWxsLAogICAgICAgIHJldmVudWVLaW5kOiBudWxsLAogICAgICAgIGRlbEZsYWc6IG51bGwsCiAgICAgICAgY3JlYXRlQnk6IG51bGwsCiAgICAgICAgY3JlYXRlVGltZTogbnVsbCwKICAgICAgICB1cGRhdGVCeTogbnVsbCwKICAgICAgICB1cGRhdGVUaW1lOiBudWxsLAogICAgICAgIHJlbWFyazogbnVsbCwKICAgICAgICBzZXR0bGVUeXBlOiBudWxsCiAgICAgIH07CiAgICB9LAogICAgLyoqIOaQnOe0ouaMiemSruaTjeS9nCAqL2hhbmRsZVF1ZXJ5OiBmdW5jdGlvbiBoYW5kbGVRdWVyeSgpIHsKICAgICAgdGhpcy5xdWVyeVBhcmFtcy5wYWdlTnVtID0gMTsKICAgICAgdGhpcy5mcmVzaFRhYmxlKCk7CiAgICB9LAogICAgLyoqIOmHjee9ruaMiemSruaTjeS9nCAqL3Jlc2V0UXVlcnk6IGZ1bmN0aW9uIHJlc2V0UXVlcnkoKSB7CiAgICAgIHRoaXMucmVzZXRGb3JtKCJxdWVyeUZvcm0iKTsKICAgICAgdGhpcy5hY3RpdmVOYW1lID0gJ3Jlc29sdmVQcmUnOwogICAgICB0aGlzLmZyZXNoVGFibGUoKTsKICAgIH0sCiAgICByb3dTdHlsZTogZnVuY3Rpb24gcm93U3R5bGUoX3JlZikgewogICAgICB2YXIgcm93ID0gX3JlZi5yb3csCiAgICAgICAgcm93SW5kZXggPSBfcmVmLnJvd0luZGV4OwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm93LCAncm93SW5kZXgnLCB7CiAgICAgICAgdmFsdWU6IHJvd0luZGV4LAogICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IGZhbHNlCiAgICAgIH0pOwogICAgfSwKICAgIHJvd0NsYXNzTmFtZTogZnVuY3Rpb24gcm93Q2xhc3NOYW1lKF9yZWYyKSB7CiAgICAgIHZhciByb3cgPSBfcmVmMi5yb3csCiAgICAgICAgcm93SW5kZXggPSBfcmVmMi5yb3dJbmRleDsKICAgICAgdmFyIHJvd05hbWUgPSAiIiwKICAgICAgICBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3cuZmluZChmdW5jdGlvbiAoYykgewogICAgICAgICAgcmV0dXJuIGMucm93SW5kZXggPT09IHJvdy5yb3dJbmRleDsKICAgICAgICB9KTsKICAgICAgaWYgKGZpbmRSb3cpIHsKICAgICAgICByb3dOYW1lID0gImN1cnJlbnQtcm93ICI7CiAgICAgIH0KICAgICAgcmV0dXJuIHJvd05hbWU7CiAgICB9LAogICAgLyoqIOaWsOWinuaMiemSruaTjeS9nCAqL2hhbmRsZUFkZDogZnVuY3Rpb24gaGFuZGxlQWRkKCkgewogICAgICB0aGlzLm9wZW4gPSB0cnVlOwogICAgICB0aGlzLnRpdGxlID0gIua3u+WKoOaUtuWFpeeUn+aIkCI7CiAgICB9LAogICAgLy/mmI7nu4YKICAgIGhhbmRsZVVwZGF0ZTogZnVuY3Rpb24gaGFuZGxlVXBkYXRlKHJvdykgewogICAgICB0aGlzLnJlc2V0KCk7CiAgICAgIHZhciBvYmogPSB7fTsKICAgICAgc3dpdGNoICh0aGlzLnNlbGVjdGlvblJvd1swXS5uYW1lKSB7CiAgICAgICAgY2FzZSAn6Zeo6K+K5pS25YWlJzoKICAgICAgICAgIG9iaiA9IHsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6IDEsCiAgICAgICAgICAgIHJldmVudWVLaW5kOiAxCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAn6Zeo6K+K6ZmE5Yqg5pS25YWlJzoKICAgICAgICAgIG9iaiA9IHsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6IDEsCiAgICAgICAgICAgIHJldmVudWVLaW5kOiAyCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAn5L2P6Zmi5pS25YWlJzoKICAgICAgICAgIG9iaiA9IHsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6IDIsCiAgICAgICAgICAgIHJldmVudWVLaW5kOiAxCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAn5L2P6Zmi6ZmE5Yqg5pS25YWlJzoKICAgICAgICAgIG9iaiA9IHsKICAgICAgICAgICAgcmV2ZW51ZVR5cGU6IDIsCiAgICAgICAgICAgIHJldmVudWVLaW5kOiAyCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICh0aGlzLmFjdGl2ZU5hbWUgPT0gInJlc29sdmVOZXh0IikgewogICAgICAgIHRoaXMudHlwZSA9ICdyZXNvbHZlQWZ0ZXInOwogICAgICAgIHRoaXMuZm9ybSA9IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgcGFnZU51bTogMSwKICAgICAgICAgIHBhZ2VTaXplOiAzMCwKICAgICAgICAgIGNvbXBDb2RlOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmFjY291bnRJbmZvLmRlcHRJZCwKICAgICAgICAgIG9UaW1lOiB0aGlzLnF1ZXJ5UGFyYW1zLm9jY3VyZVRpbWUsCiAgICAgICAgICBzZXR0bGVUeXBlOiB0aGlzLnF1ZXJ5UGFyYW1zLnNldHRsZVR5cGUKICAgICAgICB9LCBvYmopOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudHlwZSA9ICdyZXNvbHZlQmVmb3JlJzsKICAgICAgICB0aGlzLmZvcm0gPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgICBwYWdlU2l6ZTogMzAsCiAgICAgICAgICBjb21wQ29kZTogdGhpcy4kc3RvcmUuc3RhdGUudXNlci5hY2NvdW50SW5mby5kZXB0SWQsCiAgICAgICAgICBvY2N1cmVUOiB0aGlzLnF1ZXJ5UGFyYW1zLm9jY3VyZVRpbWUsCiAgICAgICAgICBzZXR0bGVNYXJrOiB0aGlzLnF1ZXJ5UGFyYW1zLnNldHRsZVR5cGUKICAgICAgICB9LCBvYmopOwogICAgICB9CiAgICAgIHRoaXMuZGV0YWlsT3BlbiA9IHRydWU7CiAgICB9CiAgfQp9Ow=="},null]}
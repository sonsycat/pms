{"remainingRequest":"F:\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js!F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js!F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\pms_UI\\src\\components\\TopNav\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\pms_UI\\src\\components\\TopNav\\index.vue","mtime":1693362203455},{"path":"F:\\pms_UI\\babel.config.js","mtime":1693361824517},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1693362167329},{"path":"F:\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"F:\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"F:\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
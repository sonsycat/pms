{"remainingRequest":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\babel-loader\\lib\\index.js!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\HRP_JAVA_pms\\pms_UI\\src\\views\\revenue\\revenue\\revenueDept.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\HRP_JAVA_pms\\pms_UI\\src\\views\\revenue\\revenue\\revenueDept.vue","mtime":1693362205876},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\babel.config.js","mtime":1693361824517},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1693362167329},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\babel-loader\\lib\\index.js","mtime":1693361909992},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1693361924439},{"path":"E:\\HRP_JAVA_pms\\pms_UI\\node_modules\\vue-loader\\lib\\index.js","mtime":1693362179279}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiRTovSFJQX0pBVkFfcG1zL3Btc19VSS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcmVnZW5lcmF0b3JSdW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkU6L0hSUF9KQVZBX3Btcy9wbXNfVUkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgeyBnZXRSZXZlbnVlRGVwdCwgZ2V0RGVwdExpc3QsIGFkZERlcHRMaXN0IH0gZnJvbSAiQC9hcGkvcmV2ZW51ZS9yZXZlbnVlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdyZXZlbnVlRGVwdCcsCiAgcHJvcHM6IHsKICAgIC8vIOS8oOWPguS4umZvcm3ooajljZUg5pa55L6/5pWw5o2u5Zue5pi+5riy5p+TCiAgICBxdWVyeVBhcmFtczogewogICAgICB0eXBlOiBbT2JqZWN0LCBBcnJheV0KICAgIH0sCiAgICBvcGVuOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaWQ6IHsKICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSwKICAgICAgZGVmYXVsdDogIiIKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBvcGVuOiB7CiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIodmFsKSB7CiAgICAgICAgdGhpcy5vcGVuRGlhbG9nID0gdmFsOwogICAgICB9LAogICAgICBkZWVwOiB0cnVlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGl0bGU6ICfmlLblhaXmoLjnrpfmlrnmoYgt56ys5LiJ5pa556eR5a6kJywKICAgICAgb3BlbkRpYWxvZzogdGhpcy5vcGVuLAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgbG9hZGluZzE6IGZhbHNlLAogICAgICBsb2FkaW5nMjogZmFsc2UsCiAgICAgIGxvYWRpbmczOiBmYWxzZSwKICAgICAgY2xpY2tDb3VudDogMCwKICAgICAgYWN0aXZlTmFtZTogIm91dFBhdGllbnQiLAogICAgICBwYXRUb1JpZ2h0Qm9vbDogdHJ1ZSwKICAgICAgcGF0VG9MZWZ0Qm9vbDogdHJ1ZSwKICAgICAgaG9zVG9SaWdodEJvb2w6IHRydWUsCiAgICAgIGhvc1RvTGVmdEJvb2w6IHRydWUsCiAgICAgIGZvcm06IHsKICAgICAgICBvdXRwYXRpZW50U2VydmljZUxlZnQ6IFtdLAogICAgICAgIC8v6Zeo6K+K5bem5L6n5pWw5o2uCiAgICAgICAgb3V0cGF0aWVudFNlcnZpY2VSaWdodDogW10sCiAgICAgICAgLy/pl6jor4rlj7PkvqfmlbDmja4KICAgICAgICBob3NwaXRhbFNlcnZpY2VMZWZ0OiBbXSwKICAgICAgICAvL+S9j+mZouW3puS+p+aVsOaNrgogICAgICAgIGhvc3BpdGFsU2VydmljZVJpZ2h0OiBbXSAvL+S9j+mZouWPs+S+p+aVsOaNrgogICAgICB9LAoKICAgICAgcnVsZXM6IHt9LAogICAgICBkZXB0RGF0YXM6IFtdLAogICAgICAvL+mXqOiviuenkeWupOWIl+ihqOaVsOaNrgogICAgICBkZXB0RGF0YXNMZW5ndGg6IDAsCiAgICAgIC8v6Zeo6K+K56eR5a6k5YiX6KGo5pWw5o2u55So5LqO5q+U6L6D5YWo6YCJ5pWw5o2uCiAgICAgIGNoYW5nZURlcHRMaXN0MTogW10sCiAgICAgIGNoYW5nZURlcHRMaXN0OiBbXSwKICAgICAgZGVwdERhdGFzSG9zOiBbXSwKICAgICAgLy/pl6jor4rnp5HlrqTliJfooajmlbDmja4KICAgICAgY2hhbmdlSG9zRGVwdExpc3Q6IFtdLAogICAgICBjaGFuZ2VIb3NEZXB0TGlzdDE6IFtdLAogICAgICBvdXRwYXRpZW50UmlnaHRMZW5ndGg6IFtdLAogICAgICBob3NwaXRhbFJpZ2h0TGVuZ3RoOiBbXSwKICAgICAgc2VsZWN0aW9uUm93b3V0cGF0aWVudExlZnQ6IFtdLAogICAgICAvL+mXqOiviuW3puS+p+WkjemAieahhuaVsOaNrgogICAgICBzZWxlY3Rpb25Sb3dPdXRwYXRpZW50UmlnaHQ6IFtdLAogICAgICAvL+mXqOiviuWPs+S+p+WkjemAieahhuaVsOaNrgogICAgICBzZWxlY3Rpb25Sb3dob3NwaXRhbExlZnQ6IFtdLAogICAgICAvL+S9j+mZouW3puS+p+WkjemAieahhuaVsOaNrgogICAgICBzZWxlY3Rpb25Sb3dob3NwaXRhbFJpZ2h0OiBbXSAvL+S9j+mZouWPs+S+p+WkjemAieahhuaVsOaNrgogICAgfTsKICB9LAoKICBjb21wdXRlZDogewogICAgbnVtOiBmdW5jdGlvbiBudW0oKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIC8v6K6h566X5bGe5oCn5Lyg6YCS5Y+C5pWw77yM5qC55o2u5Lyg5YWl55qE5pWw57uE6L+U5Zue56ym5ZCI5p2h5Lu255qE6ZW/5bqmCiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBfdGhpcy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlTGVmdCAmJiBfdGhpcy5zZWxlY3Rpb25Sb3dvdXRwYXRpZW50TGVmdC5sZW5ndGg7CiAgICAgIH07CiAgICB9LAogICAgbnVtMTogZnVuY3Rpb24gbnVtMSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIC8v6K6h566X5bGe5oCn5Lyg6YCS5Y+C5pWw77yM5qC55o2u5Lyg5YWl55qE5pWw57uE6L+U5Zue56ym5ZCI5p2h5Lu255qE6ZW/5bqmCiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBfdGhpczIuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0ICYmIF90aGlzMi5zZWxlY3Rpb25Sb3dPdXRwYXRpZW50UmlnaHQubGVuZ3RoOwogICAgICB9OwogICAgfSwKICAgIG51bTI6IGZ1bmN0aW9uIG51bTIoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICAvL+iuoeeul+WxnuaAp+S8oOmAkuWPguaVsO+8jOagueaNruS8oOWFpeeahOaVsOe7hOi/lOWbnuespuWQiOadoeS7tueahOmVv+W6pgogICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLmZvcm0uaG9zcGl0YWxTZXJ2aWNlTGVmdCAmJiBfdGhpczMuc2VsZWN0aW9uUm93aG9zcGl0YWxMZWZ0Lmxlbmd0aDsKICAgICAgfTsKICAgIH0sCiAgICBudW0zOiBmdW5jdGlvbiBudW0zKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgLy/orqHnrpflsZ7mgKfkvKDpgJLlj4LmlbDvvIzmoLnmja7kvKDlhaXnmoTmlbDnu4Tov5Tlm57nrKblkIjmnaHku7bnmoTplb/luqYKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNC5mb3JtLmhvc3BpdGFsU2VydmljZUxlZnQgJiYgX3RoaXM0LnNlbGVjdGlvblJvd2hvc3BpdGFsUmlnaHQubGVuZ3RoOwogICAgICB9OwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0RGV0YWlsKDEpOwogICAgdGhpcy5nZXRUcmVlRGVwdCh7CiAgICAgIGNvbXBDb2RlOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmFjY291bnRJbmZvLmRlcHRJZCwKICAgICAgY2xpbmljVHlwZTogMQogICAgfSk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge30sCiAgbWV0aG9kczogewogICAgLy/np5HlrqTmn6Xor6LkuIvmi4nmoYbkuovku7YKICAgIGNoYW5nZURlcHQ6IGZ1bmN0aW9uIGNoYW5nZURlcHQoZSkgewogICAgICBpZiAodGhpcy5hY3RpdmVOYW1lID09ICdvdXRQYXRpZW50JykgewogICAgICAgIHZhciBkYXRhOwogICAgICAgIGlmIChlKSB7CiAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICBjb21wQ29kZTogdGhpcy4kc3RvcmUuc3RhdGUudXNlci5hY2NvdW50SW5mby5kZXB0SWQsCiAgICAgICAgICAgIGNsaW5pY1R5cGU6IDEsCiAgICAgICAgICAgIGRlcHROYW1lOiBlCiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkYXRhID0gewogICAgICAgICAgICBjb21wQ29kZTogdGhpcy4kc3RvcmUuc3RhdGUudXNlci5hY2NvdW50SW5mby5kZXB0SWQsCiAgICAgICAgICAgIGNsaW5pY1R5cGU6IDEKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIHRoaXMuZ2V0VHJlZURlcHQoZGF0YSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuYWN0aXZlTmFtZSA9PSAnaG9zcGl0YWwnKSB7CiAgICAgICAgdmFyIF9kYXRhOwogICAgICAgIGlmIChlKSB7CiAgICAgICAgICBfZGF0YSA9IHsKICAgICAgICAgICAgY29tcENvZGU6IHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuYWNjb3VudEluZm8uZGVwdElkLAogICAgICAgICAgICBjbGluaWNUeXBlOiAyLAogICAgICAgICAgICBkZXB0TmFtZTogZQogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX2RhdGEgPSB7CiAgICAgICAgICAgIGNvbXBDb2RlOiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLmFjY291bnRJbmZvLmRlcHRJZCwKICAgICAgICAgICAgY2xpbmljVHlwZTogMgogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgdGhpcy5nZXRUcmVlRGVwdChfZGF0YSk7CiAgICAgIH0KICAgIH0sCiAgICAvL3RhYuWIh+aNouS6i+S7tgogICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKHRhYikgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoISh0YWIubGFiZWwgPT0gIuS9j+mZoiIpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdGhpczUuY2hhbmdlSG9zRGVwdExpc3QgPSBbXTsKICAgICAgICAgICAgICAgIF90aGlzNS5jaGFuZ2VIb3NEZXB0TGlzdDEgPSBbXTsKICAgICAgICAgICAgICAgIC8vIHRoaXMuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0PVtdICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX3RoaXM1LmFjdGl2ZU5hbWUgPSAnaG9zcGl0YWwnOwogICAgICAgICAgICAgICAgaWYgKCEoX3RoaXM1LmNsaWNrQ291bnQgPT0gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmdldERldGFpbCgyKTsKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfdGhpczUuY2xpY2tDb3VudCArPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5nZXRUcmVlRGVwdCh7CiAgICAgICAgICAgICAgICAgIGNvbXBDb2RlOiBfdGhpczUuJHN0b3JlLnN0YXRlLnVzZXIuYWNjb3VudEluZm8uZGVwdElkLAogICAgICAgICAgICAgICAgICBjbGluaWNUeXBlOiAyCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgaWYgKCEodGFiLmxhYmVsID09ICfpl6jor4onKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gdGhpcy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlTGVmdD1bXQogICAgICAgICAgICAgICAgX3RoaXM1LmNoYW5nZURlcHRMaXN0MSA9IFtdOwogICAgICAgICAgICAgICAgX3RoaXM1LmNoYW5nZURlcHRMaXN0ID0gW107CiAgICAgICAgICAgICAgICBfdGhpczUuYWN0aXZlTmFtZSA9ICdvdXRQYXRpZW50JzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczUuZ2V0VHJlZURlcHQoewogICAgICAgICAgICAgICAgICBjb21wQ29kZTogX3RoaXM1LiRzdG9yZS5zdGF0ZS51c2VyLmFjY291bnRJbmZvLmRlcHRJZCwKICAgICAgICAgICAgICAgICAgY2xpbmljVHlwZTogMQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvL+iOt+WPlumXqOiviuWPiuS9j+mZouWPs+S+p+WIl+ihqOaVsOaNrgogICAgZ2V0RGV0YWlsOiBmdW5jdGlvbiBnZXREZXRhaWwodHlwZSkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHBhcmFtcywgYXJyLCBfYXJyOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgIGNvbXBDb2RlOiBfdGhpczYucXVlcnlQYXJhbXMuY29tcENvZGUsCiAgICAgICAgICAgICAgICAgIHJldmVudWVDb2RlOiBfdGhpczYucXVlcnlQYXJhbXMucmV2ZW51ZUNvZGUsCiAgICAgICAgICAgICAgICAgIGRlcHRUeXBlOiB0eXBlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKCEodHlwZSA9PSAxKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3RoaXM2LmxvYWRpbmcxID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGFyciA9IFtdOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGdldFJldmVudWVEZXB0KHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS50b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyLmluZGV4T2YocmVzcG9uc2Uucm93c1tpXSkgPT09IC0xID8gYXJyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgcmF0aW86IHJlc3BvbnNlLnJvd3NbaV0ucmF0aW8sCiAgICAgICAgICAgICAgICAgICAgICBkaWN0VmFsdWU6IHJlc3BvbnNlLnJvd3NbaV0uZGVwdENvZGUsCiAgICAgICAgICAgICAgICAgICAgICBkaWN0TGFiZWw6IHJlc3BvbnNlLnJvd3NbaV0uZGVwdE5hbWUKICAgICAgICAgICAgICAgICAgICB9KSA6IGFycjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdGhpczYuZm9ybS5vdXRwYXRpZW50U2VydmljZVJpZ2h0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcnIpKTsKICAgICAgICAgICAgICAgICAgX3RoaXM2Lm91dHBhdGllbnRSaWdodExlbmd0aCA9IHJlc3BvbnNlLnRvdGFsOwogICAgICAgICAgICAgICAgICBfdGhpczYubG9hZGluZzEgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBpZiAoISh0eXBlID09IDIpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3RoaXM2LmxvYWRpbmczID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9hcnIgPSBbXTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UmV2ZW51ZURlcHQocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLnRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBfYXJyLmluZGV4T2YocmVzcG9uc2Uucm93c1tpXSkgPT09IC0xID8gX2Fyci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgIHJhdGlvOiByZXNwb25zZS5yb3dzW2ldLnJhdGlvLAogICAgICAgICAgICAgICAgICAgICAgZGljdFZhbHVlOiByZXNwb25zZS5yb3dzW2ldLmRlcHRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgZGljdExhYmVsOiByZXNwb25zZS5yb3dzW2ldLmRlcHROYW1lCiAgICAgICAgICAgICAgICAgICAgfSkgOiBfYXJyOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF90aGlzNi5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfYXJyKSk7CiAgICAgICAgICAgICAgICAgIF90aGlzNi5ob3NwaXRhbFJpZ2h0TGVuZ3RoID0gcmVzcG9uc2UudG90YWw7CiAgICAgICAgICAgICAgICAgIF90aGlzNi5sb2FkaW5nMyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy/ojrflj5bnp5HlrqTliJfooajlj4rpl6jor4rlkozkvY/pmaLlt6bkvqfmlbDmja4KICAgIGdldFRyZWVEZXB0OiBmdW5jdGlvbiBnZXRUcmVlRGVwdChkYXRhKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRpbmcyID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmICghKF90aGlzNy5jbGlja0NvdW50ID09IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM3LmdldERldGFpbCgyKTsKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfdGhpczcuY2xpY2tDb3VudCArPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIGdldERlcHRMaXN0KGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jb2RlID09IDIwMCkgewogICAgICAgICAgICAgICAgICAgIF90aGlzNy5kZXB0RGF0YXNMZW5ndGggPSByZXNwb25zZS5kYXRhLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jbGluaWNUeXBlID09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZm9ybS5vdXRwYXRpZW50U2VydmljZUxlZnQ9W10KICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5jaGFuZ2VEZXB0TGlzdDEgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5jaGFuZ2VEZXB0TGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmRlcHREYXRhcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpdGUucmF0aW8gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlOwogICAgICAgICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczcub3V0cGF0aWVudFJpZ2h0TGVuZ3RoICE9PSAwIHx8IF90aGlzNy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHQubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmNoYW5nZURlcHRMaXN0MSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZS5yYXRpbyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBfdGhpczcuZm9ybS5vdXRwYXRpZW50U2VydmljZVJpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBfdGhpczcuY2hhbmdlRGVwdExpc3QxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM3LmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodFtpXS5kaWN0VmFsdWUgPT0gX3RoaXM3LmNoYW5nZURlcHRMaXN0MVtrXS5kaWN0VmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmNoYW5nZURlcHRMaXN0MS5zcGxpY2UoaywgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlTGVmdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXM3LmNoYW5nZURlcHRMaXN0MSkpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzNy5vdXRwYXRpZW50UmlnaHRMZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5jaGFuZ2VEZXB0TGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZS5yYXRpbyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgaW4gX3RoaXM3LmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9rIGluIF90aGlzNy5jaGFuZ2VEZXB0TGlzdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHRbX2ldLmRpY3RWYWx1ZSA9PSBfdGhpczcuY2hhbmdlRGVwdExpc3RbX2tdLmRpY3RWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuY2hhbmdlRGVwdExpc3Quc3BsaWNlKF9rLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmZvcm0ub3V0cGF0aWVudFNlcnZpY2VMZWZ0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczcuY2hhbmdlRGVwdExpc3QpKTsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczcub3V0cGF0aWVudFJpZ2h0TGVuZ3RoID09IDAgJiYgX3RoaXM3LmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuZm9ybS5vdXRwYXRpZW50U2VydmljZUxlZnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzNy5kZXB0RGF0YXMpKTsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jbGluaWNUeXBlID09IDIpIHsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5jaGFuZ2VIb3NEZXB0TGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmNoYW5nZUhvc0RlcHRMaXN0MSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5mb3JtLmhvc3BpdGFsU2VydmljZUxlZnQ9W10KICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5kZXB0RGF0YXNIb3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEubWFwKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlLnJhdGlvID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZTsKICAgICAgICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM3Lmhvc3BpdGFsUmlnaHRMZW5ndGggIT09IDAgfHwgX3RoaXM3LmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHQubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmNoYW5nZUhvc0RlcHRMaXN0MSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZS5yYXRpbyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kyIGluIF90aGlzNy5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2syIGluIF90aGlzNy5jaGFuZ2VIb3NEZXB0TGlzdDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczcuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodFtfaTJdLmRpY3RWYWx1ZSA9PSBfdGhpczcuY2hhbmdlSG9zRGVwdExpc3QxW19rMl0uZGljdFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5jaGFuZ2VIb3NEZXB0TGlzdDEuc3BsaWNlKF9rMiwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5mb3JtLmhvc3BpdGFsU2VydmljZUxlZnQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KF90aGlzNy5jaGFuZ2VIb3NEZXB0TGlzdDEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmxvYWRpbmcyID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXM3LmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHQubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuY2hhbmdlSG9zRGVwdExpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEubWFwKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpdGUucmF0aW8gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMyBpbiBfdGhpczcuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9rMyBpbiBfdGhpczcuY2hhbmdlSG9zRGVwdExpc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczcuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodFtfaTNdLmRpY3RWYWx1ZSA9PSBfdGhpczcuY2hhbmdlSG9zRGVwdExpc3RbX2szXS5kaWN0VmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmNoYW5nZUhvc0RlcHRMaXN0LnNwbGljZShfazMsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcubG9hZGluZzIgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LmZvcm0uaG9zcGl0YWxTZXJ2aWNlTGVmdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoX3RoaXM3LmNoYW5nZUhvc0RlcHRMaXN0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXM3Lmhvc3BpdGFsUmlnaHRMZW5ndGggPT0gMCAmJiBfdGhpczcuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczcuZGVwdERhdGFzSG9zKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5sb2FkaW5nMiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIF90aGlzNy5tc2dFcnJvcihyZXNwb25zZS5tc2cpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBob3NwaXRhbFRvcmlnaHQ6IGZ1bmN0aW9uIGhvc3BpdGFsVG9yaWdodCgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CiAgICAgIC8v5bCG6L+H5ruk5ZCO55qE5pWw57uE6ZyA6KaB5re75Yqg5Yiw5Y+z6L6555qE5pWw57uE5LitCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbExlZnQubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHQuaW5kZXhPZih0aGlzLnNlbGVjdGlvblJvd2hvc3BpdGFsTGVmdFtpXSkgPT09IC0xID8gdGhpcy5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0LnB1c2godGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbExlZnRbaV0pIDogdGhpcy5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0OwogICAgICB9CiAgICAgIDsKICAgICAgLy/liankvZnlt6bovrnmlbDmja4KICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2k1KSB7CiAgICAgICAgX3RoaXM4LmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHQuZm9yRWFjaChmdW5jdGlvbiAoaXRlKSB7CiAgICAgICAgICBpZiAoX3RoaXM4LmZvcm0uaG9zcGl0YWxTZXJ2aWNlTGVmdFtfaTVdICYmIF90aGlzOC5mb3JtLmhvc3BpdGFsU2VydmljZUxlZnRbX2k1XS5kaWN0VmFsdWUgPT0gaXRlLmRpY3RWYWx1ZSkgewogICAgICAgICAgICBfdGhpczguZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0LnNwbGljZShfaTUsIDEpOwogICAgICAgICAgICBfaTUgLT0gMTsKICAgICAgICAgICAgX2k1IDwgMCA/IDAgOiBfaTU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgX2k0ID0gX2k1OwogICAgICB9OwogICAgICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCB0aGlzLmZvcm0uaG9zcGl0YWxTZXJ2aWNlTGVmdC5sZW5ndGg7IF9pNCsrKSB7CiAgICAgICAgX2xvb3AoX2k0KTsKICAgICAgfQogICAgfSwKICAgIGhvc3BpdGFsVG9MZWZ0OiBmdW5jdGlvbiBob3NwaXRhbFRvTGVmdCgpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbFJpZ2h0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy5mb3JtLmhvc3BpdGFsU2VydmljZUxlZnQuaW5kZXhPZih0aGlzLnNlbGVjdGlvblJvd2hvc3BpdGFsUmlnaHRbaV0pID09PSAtMSA/IHRoaXMuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0LnB1c2godGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbFJpZ2h0W2ldKSA6IHRoaXMuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0OwogICAgICB9CiAgICAgIDsKICAgICAgLy/liankvZnlj7PovrnmlbDmja4KICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMihfaTcpIHsKICAgICAgICBfdGhpczkuZm9ybS5ob3NwaXRhbFNlcnZpY2VMZWZ0LmZvckVhY2goZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgaWYgKF90aGlzOS5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0W19pN10gJiYgX3RoaXM5LmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHRbX2k3XS5kaWN0VmFsdWUgPT0gaXRlLmRpY3RWYWx1ZSkgewogICAgICAgICAgICBfdGhpczkuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodC5zcGxpY2UoX2k3LCAxKTsKICAgICAgICAgICAgX2k3IC09IDE7CiAgICAgICAgICAgIF9pNyA8IDAgPyAwIDogX2k3OwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIF9pNiA9IF9pNzsKICAgICAgfTsKICAgICAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgdGhpcy5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0Lmxlbmd0aDsgX2k2KyspIHsKICAgICAgICBfbG9vcDIoX2k2KTsKICAgICAgfQogICAgfSwKICAgIG91dHBhdGllbnRUb3JpZ2h0OiBmdW5jdGlvbiBvdXRwYXRpZW50VG9yaWdodCgpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwogICAgICAvL+Wwhui/h+a7pOWQjueahOaVsOe7hOmcgOimgea3u+WKoOWIsOWPs+i+ueeahOaVsOe7hOS4rQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VsZWN0aW9uUm93b3V0cGF0aWVudExlZnQubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodC5pbmRleE9mKHRoaXMuc2VsZWN0aW9uUm93b3V0cGF0aWVudExlZnRbaV0pID09PSAtMSA/IHRoaXMuZm9ybS5vdXRwYXRpZW50U2VydmljZVJpZ2h0LnB1c2godGhpcy5zZWxlY3Rpb25Sb3dvdXRwYXRpZW50TGVmdFtpXSkgOiB0aGlzLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodDsKICAgICAgfQogICAgICA7CiAgICAgIC8v5Ymp5L2Z5bem6L655pWw5o2uCiAgICAgIHZhciBfbG9vcDMgPSBmdW5jdGlvbiBfbG9vcDMoX2k5KSB7CiAgICAgICAgX3RoaXMxMC5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHQuZm9yRWFjaChmdW5jdGlvbiAoaXRlKSB7CiAgICAgICAgICBpZiAoX3RoaXMxMC5mb3JtLm91dHBhdGllbnRTZXJ2aWNlTGVmdFtfaTldICYmIF90aGlzMTAuZm9ybS5vdXRwYXRpZW50U2VydmljZUxlZnRbX2k5XS5kaWN0VmFsdWUgPT0gaXRlLmRpY3RWYWx1ZSkgewogICAgICAgICAgICBfdGhpczEwLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VMZWZ0LnNwbGljZShfaTksIDEpOwogICAgICAgICAgICBfaTkgLT0gMTsKICAgICAgICAgICAgX2k5IDwgMCA/IDAgOiBfaTk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgX2k4ID0gX2k5OwogICAgICB9OwogICAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCB0aGlzLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VMZWZ0Lmxlbmd0aDsgX2k4KyspIHsKICAgICAgICBfbG9vcDMoX2k4KTsKICAgICAgfQogICAgfSwKICAgIC8v5bCG5Y+z6L655pWw5o2u5pS+5Yiw5bem6L65CiAgICBvdXRwYXRpZW50VG9sZWZ0OiBmdW5jdGlvbiBvdXRwYXRpZW50VG9sZWZ0KCkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWxlY3Rpb25Sb3dPdXRwYXRpZW50UmlnaHQubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VMZWZ0LmluZGV4T2YodGhpcy5zZWxlY3Rpb25Sb3dPdXRwYXRpZW50UmlnaHRbaV0pID09PSAtMSA/IHRoaXMuZm9ybS5vdXRwYXRpZW50U2VydmljZUxlZnQucHVzaCh0aGlzLnNlbGVjdGlvblJvd091dHBhdGllbnRSaWdodFtpXSkgOiB0aGlzLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VMZWZ0OwogICAgICB9CiAgICAgIDsKICAgICAgLy/liankvZnlj7PovrnmlbDmja4KICAgICAgdmFyIF9sb29wNCA9IGZ1bmN0aW9uIF9sb29wNChfaTExKSB7CiAgICAgICAgX3RoaXMxMS5mb3JtLm91dHBhdGllbnRTZXJ2aWNlTGVmdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICAgIGlmIChfdGhpczExLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodFtfaTExXSAmJiBfdGhpczExLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodFtfaTExXS5kaWN0VmFsdWUgPT0gaXRlLmRpY3RWYWx1ZSkgewogICAgICAgICAgICBfdGhpczExLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodC5zcGxpY2UoX2kxMSwgMSk7CiAgICAgICAgICAgIF9pMTEgLT0gMTsKICAgICAgICAgICAgX2kxMSA8IDAgPyBfaTExID0gMCA6IF9pMTE7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgX2kxMCA9IF9pMTE7CiAgICAgIH07CiAgICAgIGZvciAodmFyIF9pMTAgPSAwOyBfaTEwIDwgdGhpcy5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHQubGVuZ3RoOyBfaTEwKyspIHsKICAgICAgICBfbG9vcDQoX2kxMCk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDpl6jor4rlpJrpgInmoYbpgInkuK3mlbDmja4KICAgIGhhbmRsZVNlbGVjdGlvbk91dHBhdGllbnRDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGlvbk91dHBhdGllbnRDaGFuZ2Uoc2VsZWN0aW9uKSB7CiAgICAgIHRoaXMuc2VsZWN0aW9uUm93b3V0cGF0aWVudExlZnQgPSBzZWxlY3Rpb24ubWFwKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICBpdGUucmF0aW8gPSAwOwogICAgICAgIHJldHVybiBpdGU7CiAgICAgIH0pOwogICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCAhPT0gMCkgewogICAgICAgIHRoaXMucGF0VG9SaWdodEJvb2wgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhdFRvUmlnaHRCb29sID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIC8v6Zeo6K+K5Y+z5L6n5aSa6YCJ5qGG5pWw5o2uCiAgICBoYW5kbGVTZWxlY3Rpb25DaGFuZ2VSaWdodDogZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uQ2hhbmdlUmlnaHQoc2VsZWN0aW9uKSB7CiAgICAgIHRoaXMuc2VsZWN0aW9uUm93T3V0cGF0aWVudFJpZ2h0ID0gc2VsZWN0aW9uOwogICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCAhPT0gMCkgewogICAgICAgIHRoaXMucGF0VG9MZWZ0Qm9vbCA9IGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucGF0VG9MZWZ0Qm9vbCA9IHRydWU7CiAgICAgIH0KICAgIH0sCiAgICAvL+S9j+mZouW3puS+p+WkmumAieahhgogICAgaGFuZGxlU2VsZWN0aW9uSG9zcGl0YWxDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGlvbkhvc3BpdGFsQ2hhbmdlKHNlbGVjdGlvbikgewogICAgICB0aGlzLnNlbGVjdGlvblJvd2hvc3BpdGFsTGVmdCA9IHNlbGVjdGlvbi5tYXAoZnVuY3Rpb24gKGl0ZSkgewogICAgICAgIGl0ZS5yYXRpbyA9IDA7CiAgICAgICAgcmV0dXJuIGl0ZTsKICAgICAgfSk7CiAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgdGhpcy5ob3NUb1JpZ2h0Qm9vbCA9IGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaG9zVG9SaWdodEJvb2wgPSB0cnVlOwogICAgICB9CiAgICB9LAogICAgLy/kvY/pmaLlj7PkvqflpJrpgInmoYYKICAgIGhhbmRsZVNlbGVjdGlvbkhvc3BpdGFsQ2hhbmdlUmlnaHQ6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGlvbkhvc3BpdGFsQ2hhbmdlUmlnaHQoc2VsZWN0aW9uKSB7CiAgICAgIHRoaXMuc2VsZWN0aW9uUm93aG9zcGl0YWxSaWdodCA9IHNlbGVjdGlvbjsKICAgICAgaWYgKHNlbGVjdGlvbi5sZW5ndGggIT09IDApIHsKICAgICAgICB0aGlzLmhvc1RvTGVmdEJvb2wgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmhvc1RvTGVmdEJvb2wgPSB0cnVlOwogICAgICB9CiAgICB9LAogICAgcm93Q2xpY2s6IGZ1bmN0aW9uIHJvd0NsaWNrKHJvdywgY29sdW1uLCBldmVudCkgewogICAgICB2YXIgcmVmc0VsVGFibGUgPSB0aGlzLiRyZWZzLm11bHRpcGxlVGFibGU7CiAgICAgIHZhciBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3dvdXRwYXRpZW50TGVmdC5maW5kKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgcmV0dXJuIGMucm93SW5kZXggPT0gcm93LnJvd0luZGV4OwogICAgICB9KTsKICAgICAgaWYgKGZpbmRSb3cgJiYgdGhpcy5zZWxlY3Rpb25Sb3dvdXRwYXRpZW50TGVmdC5sZW5ndGggPT0gMSkgewogICAgICAgIHJlZnNFbFRhYmxlLnRvZ2dsZVJvd1NlbGVjdGlvbihyb3csIGZhbHNlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgcmVmc0VsVGFibGUuY2xlYXJTZWxlY3Rpb24oKTsKICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdyk7CiAgICB9LAogICAgcm93Q2xpY2tQYXRSaWdodDogZnVuY3Rpb24gcm93Q2xpY2tQYXRSaWdodChyb3csIGNvbHVtbiwgZXZlbnQpIHsKICAgICAgdmFyIHJlZnNFbFRhYmxlID0gdGhpcy4kcmVmcy5tdWx0aXBsZVRhYmxlUmlnaHQ7CiAgICAgIHZhciBmaW5kUm93ID0gdGhpcy5zZWxlY3Rpb25Sb3dPdXRwYXRpZW50UmlnaHQuZmluZChmdW5jdGlvbiAoYykgewogICAgICAgIHJldHVybiBjLnJvd0luZGV4ID09IHJvdy5yb3dJbmRleDsKICAgICAgfSk7CiAgICAgIGlmIChmaW5kUm93ICYmIHRoaXMuc2VsZWN0aW9uUm93T3V0cGF0aWVudFJpZ2h0Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICByb3dDbGlja0hvczogZnVuY3Rpb24gcm93Q2xpY2tIb3Mocm93LCBjb2x1bW4sIGV2ZW50KSB7CiAgICAgIHZhciByZWZzRWxUYWJsZSA9IHRoaXMuJHJlZnMubXVsdGlwbGVUYWJsZUhvczsKICAgICAgdmFyIGZpbmRSb3cgPSB0aGlzLnNlbGVjdGlvblJvd2hvc3BpdGFsTGVmdC5maW5kKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgcmV0dXJuIGMucm93SW5kZXggPT0gcm93LnJvd0luZGV4OwogICAgICB9KTsKICAgICAgaWYgKGZpbmRSb3cgJiYgdGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbExlZnQubGVuZ3RoID09IDEpIHsKICAgICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93LCBmYWxzZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHJlZnNFbFRhYmxlLmNsZWFyU2VsZWN0aW9uKCk7CiAgICAgIHJlZnNFbFRhYmxlLnRvZ2dsZVJvd1NlbGVjdGlvbihyb3cpOwogICAgfSwKICAgIHJvd0NsaWNrSG9zUmlnaHQ6IGZ1bmN0aW9uIHJvd0NsaWNrSG9zUmlnaHQocm93LCBjb2x1bW4sIGV2ZW50KSB7CiAgICAgIHZhciByZWZzRWxUYWJsZSA9IHRoaXMuJHJlZnMubXVsdGlwbGVUYWJsZVJpZ2h0SG9zOwogICAgICB2YXIgZmluZFJvdyA9IHRoaXMuc2VsZWN0aW9uUm93aG9zcGl0YWxSaWdodC5maW5kKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgcmV0dXJuIGMucm93SW5kZXggPT0gcm93LnJvd0luZGV4OwogICAgICB9KTsKICAgICAgaWYgKGZpbmRSb3cgJiYgdGhpcy5zZWxlY3Rpb25Sb3dob3NwaXRhbFJpZ2h0Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgcmVmc0VsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICByZWZzRWxUYWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICByZWZzRWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93KTsKICAgIH0sCiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoKSB7CiAgICAgIHRoaXMuZm9ybSA9IHsKICAgICAgICBvdXRwYXRpZW50U2VydmljZUxlZnQ6IFtdLAogICAgICAgIC8v6Zeo6K+K5bem5L6n5pWw5o2uCiAgICAgICAgb3V0cGF0aWVudFNlcnZpY2VSaWdodDogW10sCiAgICAgICAgLy/pl6jor4rlj7PkvqfmlbDmja4KICAgICAgICBob3NwaXRhbFNlcnZpY2VMZWZ0OiBbXSwKICAgICAgICAvL+S9j+mZouW3puS+p+aVsOaNrgogICAgICAgIGhvc3BpdGFsU2VydmljZVJpZ2h0OiBbXSAvL+S9j+mZouWPs+S+p+aVsOaNrgogICAgICB9OwoKICAgICAgdGhpcy5jbGlja0NvdW50ID0gMDsKICAgIH0sCiAgICAvKiog56eR5a6k5o+Q5Lqk5oyJ6ZKuICovc3VibWl0Rm9ybURlcHQ6IGZ1bmN0aW9uIHN1Ym1pdEZvcm1EZXB0KCkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CiAgICAgIHRoaXMuJHJlZnNbInF1ZXJ5Rm9ybSJdLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgdmFyIHBhcmFtcywKICAgICAgICAgICAgYXJyID0gW10sCiAgICAgICAgICAgIGFycjEgPSBbXSwKICAgICAgICAgICAgc3VtID0gMCwKICAgICAgICAgICAgc3VtMSA9IDA7CiAgICAgICAgICBpZiAoX3RoaXMxMi5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHQubGVuZ3RoID09IDAgJiYgX3RoaXMxMi5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0ID09IDApIHsKICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgIHJldmVudWVDb2RlOiBfdGhpczEyLnF1ZXJ5UGFyYW1zLnJldmVudWVDb2RlLAogICAgICAgICAgICAgIHBtc1JldmVudWVEZXB0czogW10sCiAgICAgICAgICAgICAgY29tcENvZGU6IF90aGlzMTIucXVlcnlQYXJhbXMuY29tcENvZGUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIHNhdmVMb2FkaW5nID0gX3RoaXMxMi5zYXZlTG9hZGluZygpOwogICAgICAgICAgICBhZGREZXB0TGlzdChwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgX3RoaXMxMi5tc2dTdWNjZXNzKCLmlLblhaXmoLjnrpfnp5HlrqTorr7nva7miJDlip8iKTsKICAgICAgICAgICAgICBfdGhpczEyLiRlbWl0KCJzdWNjZXNzIiwgZmFsc2UpOwogICAgICAgICAgICAgIHNhdmVMb2FkaW5nLmNsb3NlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKF90aGlzMTIuZm9ybS5vdXRwYXRpZW50U2VydmljZVJpZ2h0Lmxlbmd0aCA9PSAwICYmIF90aGlzMTIuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodCAhPSAwKSB7CiAgICAgICAgICAgIF90aGlzMTIuZm9ybS5ob3NwaXRhbFNlcnZpY2VSaWdodC5mb3JFYWNoKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICAgICAgICBzdW0xICs9IE51bWJlcihpdGUucmF0aW8pOwogICAgICAgICAgICAgIGFycjEucHVzaCh7CiAgICAgICAgICAgICAgICBkZXB0TmFtZTogaXRlLmRpY3RMYWJlbCwKICAgICAgICAgICAgICAgIGRlcHRDb2RlOiBpdGUuZGljdFZhbHVlLAogICAgICAgICAgICAgICAgcmF0aW86IGl0ZS5yYXRpbwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgIHJldmVudWVDb2RlOiBfdGhpczEyLnF1ZXJ5UGFyYW1zLnJldmVudWVDb2RlLAogICAgICAgICAgICAgIHBtc1JldmVudWVEZXB0czogYXJyMSwKICAgICAgICAgICAgICBjb21wQ29kZTogX3RoaXMxMi5xdWVyeVBhcmFtcy5jb21wQ29kZQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoc3VtMSA+IDEwMCkgewogICAgICAgICAgICAgIF90aGlzMTIubXNnRXJyb3IoIuS9j+mZouW3sumAieenkeWupOWIhuaRiuavlOS+i+eahOaAu+WSjOW6lOWwj+S6juaIluetieS6jjEwMCIpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgX3NhdmVMb2FkaW5nID0gX3RoaXMxMi5zYXZlTG9hZGluZygpOwogICAgICAgICAgICAgIGFkZERlcHRMaXN0KHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIF90aGlzMTIubXNnU3VjY2Vzcygi5pS25YWl5qC4566X56eR5a6k6K6+572u5oiQ5YqfIik7CiAgICAgICAgICAgICAgICBfdGhpczEyLiRlbWl0KCJzdWNjZXNzIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgX3NhdmVMb2FkaW5nLmNsb3NlKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChfdGhpczEyLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodC5sZW5ndGggIT0gMCAmJiBfdGhpczEyLmZvcm0uaG9zcGl0YWxTZXJ2aWNlUmlnaHQgPT0gMCkgewogICAgICAgICAgICBfdGhpczEyLmZvcm0ub3V0cGF0aWVudFNlcnZpY2VSaWdodC5mb3JFYWNoKGZ1bmN0aW9uIChpdGUpIHsKICAgICAgICAgICAgICBzdW0gKz0gTnVtYmVyKGl0ZS5yYXRpbyk7CiAgICAgICAgICAgICAgYXJyLnB1c2goewogICAgICAgICAgICAgICAgZGVwdE5hbWU6IGl0ZS5kaWN0TGFiZWwsCiAgICAgICAgICAgICAgICBkZXB0Q29kZTogaXRlLmRpY3RWYWx1ZSwKICAgICAgICAgICAgICAgIHJhdGlvOiBpdGUucmF0aW8KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHBhcmFtcyA9IHsKICAgICAgICAgICAgICByZXZlbnVlQ29kZTogX3RoaXMxMi5xdWVyeVBhcmFtcy5yZXZlbnVlQ29kZSwKICAgICAgICAgICAgICBwbXNSZXZlbnVlRGVwdHM6IGFyciwKICAgICAgICAgICAgICBjb21wQ29kZTogX3RoaXMxMi5xdWVyeVBhcmFtcy5jb21wQ29kZQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoc3VtID4gMTAwKSB7CiAgICAgICAgICAgICAgX3RoaXMxMi5tc2dFcnJvcigi6Zeo6K+K5bey6YCJ56eR5a6k5YiG5pGK5q+U5L6L55qE5oC75ZKM5bqU5bCP5LqO5oiW562J5LqOMTAwIik7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBfc2F2ZUxvYWRpbmcyID0gX3RoaXMxMi5zYXZlTG9hZGluZygpOwogICAgICAgICAgICAgIGFkZERlcHRMaXN0KHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIF90aGlzMTIubXNnU3VjY2Vzcygi5pS25YWl5qC4566X56eR5a6k6K6+572u5oiQ5YqfIik7CiAgICAgICAgICAgICAgICBfdGhpczEyLiRlbWl0KCJzdWNjZXNzIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgX3NhdmVMb2FkaW5nMi5jbG9zZSgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoX3RoaXMxMi5mb3JtLm91dHBhdGllbnRTZXJ2aWNlUmlnaHQubGVuZ3RoICE9IDAgJiYgX3RoaXMxMi5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0Lmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICAgIF90aGlzMTIuZm9ybS5vdXRwYXRpZW50U2VydmljZVJpZ2h0LmZvckVhY2goZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgIHN1bSArPSBOdW1iZXIoaXRlLnJhdGlvKTsKICAgICAgICAgICAgICBhcnIucHVzaCh7CiAgICAgICAgICAgICAgICBkZXB0TmFtZTogaXRlLmRpY3RMYWJlbCwKICAgICAgICAgICAgICAgIGRlcHRDb2RlOiBpdGUuZGljdFZhbHVlLAogICAgICAgICAgICAgICAgcmF0aW86IGl0ZS5yYXRpbwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMxMi5mb3JtLmhvc3BpdGFsU2VydmljZVJpZ2h0LmZvckVhY2goZnVuY3Rpb24gKGl0ZSkgewogICAgICAgICAgICAgIHN1bTEgKz0gTnVtYmVyKGl0ZS5yYXRpbyk7CiAgICAgICAgICAgICAgYXJyMS5wdXNoKHsKICAgICAgICAgICAgICAgIGRlcHROYW1lOiBpdGUuZGljdExhYmVsLAogICAgICAgICAgICAgICAgZGVwdENvZGU6IGl0ZS5kaWN0VmFsdWUsCiAgICAgICAgICAgICAgICByYXRpbzogaXRlLnJhdGlvCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgcmV2ZW51ZUNvZGU6IF90aGlzMTIucXVlcnlQYXJhbXMucmV2ZW51ZUNvZGUsCiAgICAgICAgICAgICAgcG1zUmV2ZW51ZURlcHRzOiBbXS5jb25jYXQoYXJyMSwgYXJyKSwKICAgICAgICAgICAgICBjb21wQ29kZTogX3RoaXMxMi5xdWVyeVBhcmFtcy5jb21wQ29kZQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoc3VtID4gMTAwIHx8IHN1bTEgPiAxMDApIHsKICAgICAgICAgICAgICBfdGhpczEyLm1zZ0Vycm9yKCLpl6jor4rlj4rkvY/pmaLlt7LpgInnp5HlrqTliIbmkYrmr5TkvovnmoTmgLvlkozlupTliIbliKvlsI/kuo7miJbnrYnkuo4xMDAiKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIF9zYXZlTG9hZGluZzMgPSBfdGhpczEyLnNhdmVMb2FkaW5nKCk7CiAgICAgICAgICAgICAgYWRkRGVwdExpc3QocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgX3RoaXMxMi5tc2dTdWNjZXNzKCLmlLblhaXmoLjnrpfnp5HlrqTorr7nva7miJDlip8iKTsKICAgICAgICAgICAgICAgIF90aGlzMTIuJGVtaXQoInN1Y2Nlc3MiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBfc2F2ZUxvYWRpbmczLmNsb3NlKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOW8ueahhuWFs+mXrQogICAgaGFuZGxlRGlhbG9nQ2xvc2U6IGZ1bmN0aW9uIGhhbmRsZURpYWxvZ0Nsb3NlKCkgewogICAgICB0aGlzLiRlbWl0KCJjYW5jZWwiLCBmYWxzZSk7CiAgICAgIHRoaXMucmVzZXQoKTsKICAgIH0sCiAgICAvLyDlj5bmtogKICAgIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKCkgewogICAgICB0aGlzLiRlbWl0KCJjYW5jZWwiLCBmYWxzZSk7CiAgICAgIHRoaXMucmVzZXQoKTsKICAgIH0KICB9Cn07"},null]}